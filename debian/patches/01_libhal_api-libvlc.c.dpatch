#! /bin/sh /usr/share/dpatch/dpatch-run
## 01_libhal_api-libvlc.c.dpatch by Daniel T Chen <crimsun@fungus.sh.nu>
##
## All lines beginning with `## DP:' are a description of the patch.
## DP: Use new HAL 0.5 API in src/libvlc.c

@DPATCH@

--- vlc-0.8.4-svn20050920.orig/src/libvlc.c
+++ vlc-0.8.4-svn20050920/src/libvlc.c
@@ -2561,22 +2561,26 @@
     char *block_dev;
     dbus_bool_t b_dvd;
 
-    if( ( ctx = hal_initialize( NULL, FALSE ) ) )
+    if( ( ctx = libhal_ctx_init_direct( NULL ) ) )
     {
-        if( ( devices = hal_get_all_devices( ctx, &i_devices ) ) )
+        if( ( devices = libhal_get_all_devices( ctx, &i_devices, NULL ) ) )
         {
             for( i = 0; i < i_devices; i++ )
             {
-                if( !hal_device_property_exists( ctx, devices[ i ],
-                                                "storage.cdrom.dvd" ) )
+                if( !libhal_device_property_exists( ctx, devices[ i ],
+                                                    "storage.cdrom.dvd",
+						    NULL ) )
                 {
                     continue;
                 }
 
-                b_dvd = hal_device_get_property_bool( ctx, devices[ i ],
-                                                      "storage.cdrom.dvd" );
-                block_dev = hal_device_get_property_string( ctx, devices[ i ],
-                                                            "block.device" );
+                b_dvd = libhal_device_get_property_bool( ctx, devices[ i ],
+                                                         "storage.cdrom.dvd",
+						         NULL );
+                block_dev = libhal_device_get_property_string( ctx,
+							       devices[ i ],
+                                                               "block.device",
+							       NULL );
 
                 if( b_dvd )
                 {
@@ -2586,12 +2586,12 @@
                 config_PutPsz( p_vlc, "vcd", block_dev );
                 config_PutPsz( p_vlc, "cd-audio", block_dev );
 
-                hal_free_string( block_dev );
+                libhal_free_string( block_dev );
             }
-            hal_free_string_array( devices );
+            libhal_free_string_array( devices );
         }
 
-        hal_shutdown( ctx );
+        libhal_ctx_shutdown( ctx, NULL );
     }
 #endif
 }
--- vlc-0.8.4-svn20050920.orig/modules/services_discovery/hal.c
+++ vlc-0.8.4-svn20050920/modules/services_discovery/hal.c
@@ -106,7 +106,7 @@
     p_sd->pf_run = Run;
     p_sd->p_sys  = p_sys;
 
-    if( !( p_sys->p_ctx = hal_initialize( NULL, FALSE ) ) )
+    if( !( p_sys->p_ctx = libhal_ctx_init_direct( NULL ) ) )
     {
         free( p_sys );
         msg_Err( p_sd, "hal not available" );
@@ -160,16 +160,17 @@
     services_discovery_sys_t    *p_sys  = p_sd->p_sys;
     playlist_t          *p_playlist;
     playlist_item_t     *p_item;
-    psz_name = hal_device_get_property_string( p_sd->p_sys->p_ctx,
-                                               psz_device, "volume.label" );
-    psz_blockdevice = hal_device_get_property_string( p_sd->p_sys->p_ctx,
-                                                 psz_device, "block.device" );
+    psz_name = libhal_device_get_property_string( p_sd->p_sys->p_ctx,
+                                                  psz_device, "volume.label",
+						  NULL );
+    psz_blockdevice = libhal_device_get_property_string( p_sd->p_sys->p_ctx,
+                                            psz_device, "block.device", NULL );
     asprintf( &psz_uri, "dvd://%s", psz_blockdevice );
     /* Create the playlist item here */
     p_item = playlist_ItemNew( p_sd, psz_uri,
                                psz_name );
     free( psz_uri );
-    hal_free_string( psz_device );
+    libhal_free_string( psz_device );
     if( !p_item )
     {
         return;
@@ -197,14 +198,14 @@
     services_discovery_sys_t    *p_sys  = p_sd->p_sys;
     playlist_t          *p_playlist;
     playlist_item_t     *p_item;
-    psz_blockdevice = hal_device_get_property_string( p_sd->p_sys->p_ctx,
-                                                 psz_device, "block.device" );
+    psz_blockdevice = libhal_device_get_property_string( p_sd->p_sys->p_ctx,
+                                             psz_device, "block.device", NULL );
     asprintf( &psz_uri, "cdda://%s", psz_blockdevice );
     /* Create the playlist item here */
     p_item = playlist_ItemNew( p_sd, psz_uri,
                                psz_name );
     free( psz_uri );
-    hal_free_string( psz_device );
+    libhal_free_string( psz_device );
     if( !p_item )
     {
         return;
@@ -229,24 +230,25 @@
 {
     char *psz_disc_type;
     services_discovery_sys_t    *p_sys  = p_sd->p_sys;
-    if( hal_device_property_exists( p_sys->p_ctx, psz_device,
-                                    "volume.disc.type" ) )
+    if( libhal_device_property_exists( p_sys->p_ctx, psz_device,
+                                       "volume.disc.type", NULL ) )
     {
-        psz_disc_type = hal_device_get_property_string( p_sys->p_ctx,
-                                                        psz_device,
-                                                        "volume.disc.type" );
+        psz_disc_type = libhal_device_get_property_string( p_sys->p_ctx,
+                                                           psz_device,
+                                                           "volume.disc.type",
+							   NULL );
         if( !strcmp( psz_disc_type, "dvd_rom" ) )
         {
             AddDvd( p_sd, psz_device );
         }
         else if( !strcmp( psz_disc_type, "cd_rom" ) )
         {
-            if( hal_device_get_property_bool( p_sys->p_ctx, psz_device, "volume.disc.has_audio" ) )
+            if( libhal_device_get_property_bool( p_sys->p_ctx, psz_device, "volume.disc.has_audio", NULL ) )
             {
                 AddCdda( p_sd, psz_device );
             }
         }
-        hal_free_string( psz_disc_type );
+        libhal_free_string( psz_disc_type );
     }
 }
 
@@ -260,7 +262,7 @@
     services_discovery_sys_t    *p_sys  = p_sd->p_sys;
 
     /* parse existing devices first */
-    if( ( devices = hal_get_all_devices( p_sys->p_ctx, &i_devices ) ) )
+    if( ( devices = libhal_get_all_devices( p_sys->p_ctx, &i_devices, NULL ) ) )
     {
         for( i = 0; i < i_devices; i++ )
         {
