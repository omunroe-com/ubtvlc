/* DO NOT EDIT THIS FILE! See Makefile.am */
struct module_symbols_t {
    int (* aout_FiltersCreatePipeline_inner) ( aout_instance_t * p_aout, aout_filter_t ** pp_filters, int * pi_nb_filters, const audio_sample_format_t * p_input_format, const audio_sample_format_t * p_output_format ) ;
    void (* aout_FiltersDestroyPipeline_inner) ( aout_instance_t * p_aout, aout_filter_t ** pp_filters, int i_nb_filters ) ;
    void (* aout_FiltersPlay_inner) ( aout_instance_t * p_aout, aout_filter_t ** pp_filters, int i_nb_filters, aout_buffer_t ** pp_input_buffer ) ;
    aout_buffer_t * (* aout_OutputNextBuffer_inner) ( aout_instance_t *, mtime_t, vlc_bool_t ) ;
    unsigned int (* aout_FormatNbChannels_inner) ( const audio_sample_format_t * p_format ) ;
    void (* aout_FormatPrepare_inner) ( audio_sample_format_t * p_format ) ;
    void (* aout_FormatPrint_inner) ( aout_instance_t * p_aout, const char * psz_text, const audio_sample_format_t * p_format ) ;
    void (* aout_FormatsPrint_inner) ( aout_instance_t * p_aout, const char * psz_text, const audio_sample_format_t * p_format1, const audio_sample_format_t * p_format2 ) ;
    const char * (* aout_FormatPrintChannels_inner) ( const audio_sample_format_t * ) ;
    aout_buffer_t * (* aout_FifoPop_inner) ( aout_instance_t * p_aout, aout_fifo_t * p_fifo ) ;
    mtime_t (* aout_FifoFirstDate_inner) ( aout_instance_t *, aout_fifo_t * ) ;
    void (* aout_VolumeSoftInit_inner) ( aout_instance_t * ) ;
    void (* aout_VolumeNoneInit_inner) ( aout_instance_t * ) ;
    aout_instance_t * (* __aout_New_inner) ( vlc_object_t * ) ;
    void (* aout_Delete_inner) ( aout_instance_t * ) ;
    void (* aout_DateInit_inner) ( audio_date_t *, uint32_t ) ;
    void (* aout_DateSet_inner) ( audio_date_t *, mtime_t ) ;
    void (* aout_DateMove_inner) ( audio_date_t *, mtime_t ) ;
    mtime_t (* aout_DateGet_inner) ( const audio_date_t * ) ;
    mtime_t (* aout_DateIncrement_inner) ( audio_date_t *, uint32_t ) ;
    int (* aout_CheckChannelReorder_inner) ( const uint32_t *, const uint32_t *, uint32_t, int, int * ) ;
    void (* aout_ChannelReorder_inner) ( uint8_t *, int, int, const int *, int ) ;
    aout_input_t * (* __aout_DecNew_inner) ( vlc_object_t *, aout_instance_t **, audio_sample_format_t * ) ;
    int (* aout_DecDelete_inner) ( aout_instance_t *, aout_input_t * ) ;
    aout_buffer_t * (* aout_DecNewBuffer_inner) ( aout_instance_t *, aout_input_t *, size_t ) ;
    void (* aout_DecDeleteBuffer_inner) ( aout_instance_t *, aout_input_t *, aout_buffer_t * ) ;
    int (* aout_DecPlay_inner) ( aout_instance_t *, aout_input_t *, aout_buffer_t * ) ;
    int (* __aout_VolumeGet_inner) ( vlc_object_t *, audio_volume_t * ) ;
    int (* __aout_VolumeSet_inner) ( vlc_object_t *, audio_volume_t ) ;
    int (* __aout_VolumeInfos_inner) ( vlc_object_t *, audio_volume_t * ) ;
    int (* __aout_VolumeUp_inner) ( vlc_object_t *, int, audio_volume_t * ) ;
    int (* __aout_VolumeDown_inner) ( vlc_object_t *, int, audio_volume_t * ) ;
    int (* __aout_VolumeMute_inner) ( vlc_object_t *, audio_volume_t * ) ;
    int (* aout_Restart_inner) ( aout_instance_t * p_aout ) ;
    int (* aout_FindAndRestart_inner) ( vlc_object_t *, const char *, vlc_value_t, vlc_value_t, void * ) ;
    int (* aout_ChannelsRestart_inner) ( vlc_object_t *, const char *, vlc_value_t, vlc_value_t, void * ) ;
    vlc_bool_t (* vlc_current_charset_inner) ( char ** ) ;
    int (* __config_GetType_inner) (vlc_object_t *, const char *) ;
    int (* __config_GetInt_inner) (vlc_object_t *, const char *) ;
    void (* __config_PutInt_inner) (vlc_object_t *, const char *, int) ;
    float (* __config_GetFloat_inner) (vlc_object_t *, const char *) ;
    void (* __config_PutFloat_inner) (vlc_object_t *, const char *, float) ;
    char * (* __config_GetPsz_inner) (vlc_object_t *, const char *) ;
    void (* __config_PutPsz_inner) (vlc_object_t *, const char *, const char *) ;
    int (* __config_LoadCmdLine_inner) ( vlc_object_t *, int *, char *[], vlc_bool_t ) ;
    char * (* config_GetHomeDir_inner) ( void ) ;
    int (* __config_LoadConfigFile_inner) ( vlc_object_t *, const char * ) ;
    int (* __config_SaveConfigFile_inner) ( vlc_object_t *, const char * ) ;
    void (* __config_ResetAll_inner) ( vlc_object_t * ) ;
    module_config_t * (* config_FindConfig_inner) ( vlc_object_t *, const char * ) ;
    module_t * (* config_FindModule_inner) ( vlc_object_t *, const char * ) ;
    void (* config_Duplicate_inner) ( module_t *, module_config_t * ) ;
    void (* config_SetCallbacks_inner) ( module_config_t *, module_config_t * ) ;
    void (* config_UnsetCallbacks_inner) ( module_config_t * ) ;
    int (* __intf_Eject_inner) ( vlc_object_t *, const char * ) ;
    const iso639_lang_t * (* GetLang_1_inner) ( const char * ) ;
    const iso639_lang_t * (* GetLang_2T_inner) ( const char * ) ;
    const iso639_lang_t * (* GetLang_2B_inner) ( const char * ) ;
    const char * (* DecodeLanguage_inner) ( uint16_t ) ;
    module_t * (* __module_Need_inner) ( vlc_object_t *, const char *, const char *, vlc_bool_t ) ;
    void (* __module_Unneed_inner) ( vlc_object_t *, module_t * ) ;
    char * (* mstrtime_inner) ( char *psz_buffer, mtime_t date ) ;
    mtime_t (* mdate_inner) ( void ) ;
    void (* mwait_inner) ( mtime_t date ) ;
    void (* msleep_inner) ( mtime_t delay ) ;
    char * (* secstotimestr_inner) ( char *psz_buffer, int secs ) ;
    void (* date_Init_inner) ( date_t *, uint32_t, uint32_t ) ;
    void (* date_Change_inner) ( date_t *, uint32_t, uint32_t ) ;
    void (* date_Set_inner) ( date_t *, mtime_t ) ;
    mtime_t (* date_Get_inner) ( const date_t * ) ;
    void (* date_Move_inner) ( date_t *, mtime_t ) ;
    mtime_t (* date_Increment_inner) ( date_t *, uint32_t ) ;
    int (* __net_OpenTCP_inner) ( vlc_object_t *p_this, const char *psz_host, int i_port ) ;
    int (* __net_ListenTCP_inner) ( vlc_object_t *p_this, char *psz_localaddr, int i_port ) ;
    int (* __net_Accept_inner) ( vlc_object_t *p_this, int fd_listen, mtime_t i_wait ) ;
    int (* __net_OpenUDP_inner) ( vlc_object_t *p_this, char *psz_bind, int i_bind, char *psz_server, int i_server ) ;
    void (* net_Close_inner) ( int fd ) ;
    int (* __net_Read_inner) ( vlc_object_t *p_this, int fd, uint8_t *p_data, int i_data, vlc_bool_t b_retry ) ;
    int (* __net_ReadNonBlock_inner) ( vlc_object_t *p_this, int fd, uint8_t *p_data, int i_data, mtime_t i_wait ) ;
    int (* __net_Select_inner) ( vlc_object_t *p_this, int *pi_fd, int i_fd,uint8_t *p_data, int i_data, mtime_t i_wait ) ;
    int (* __net_Write_inner) ( vlc_object_t *p_this, int fd, uint8_t *p_data, int i_data ) ;
    char * (* __net_Gets_inner) ( vlc_object_t *p_this, int fd ) ;
    int (* net_Printf_inner) ( vlc_object_t *p_this, int fd, const char *psz_fmt, ... ) ;
    int (* __net_vaPrintf_inner) ( vlc_object_t *p_this, int fd, const char *psz_fmt, va_list args ) ;
    int (* vout_ShowTextRelative_inner) ( vout_thread_t *, int, char *, text_style_t *, int, int, int, mtime_t ) ;
    int (* vout_ShowTextAbsolute_inner) ( vout_thread_t *, int, char *, text_style_t *, int, int, int, mtime_t, mtime_t ) ;
    void (* __vout_OSDMessage_inner) ( vlc_object_t *, int, char *, ... ) ;
    void (* vout_OSDSlider_inner) ( vlc_object_t *, int, int , short ) ;
    void (* vout_OSDIcon_inner) ( vlc_object_t *, int, short ) ;
    void (* __sout_CfgParse_inner) ( vlc_object_t *, char *psz_prefix, const char **ppsz_options, sout_cfg_t * ) ;
    char * (* sout_CfgCreate_inner) ( char **, sout_cfg_t **, char * ) ;
    sout_instance_t * (* __sout_NewInstance_inner) ( vlc_object_t *, char * ) ;
    void (* sout_DeleteInstance_inner) ( sout_instance_t * ) ;
    sout_packetizer_input_t * (* sout_InputNew_inner) ( sout_instance_t *, es_format_t * ) ;
    int (* sout_InputDelete_inner) ( sout_packetizer_input_t * ) ;
    int (* sout_InputSendBuffer_inner) ( sout_packetizer_input_t *, block_t* ) ;
    sout_access_out_t * (* sout_AccessOutNew_inner) ( sout_instance_t *, char *psz_access, char *psz_name ) ;
    void (* sout_AccessOutDelete_inner) ( sout_access_out_t * ) ;
    int (* sout_AccessOutSeek_inner) ( sout_access_out_t *, off_t ) ;
    int (* sout_AccessOutRead_inner) ( sout_access_out_t *, block_t * ) ;
    int (* sout_AccessOutWrite_inner) ( sout_access_out_t *, block_t * ) ;
    sout_mux_t * (* sout_MuxNew_inner) ( sout_instance_t*, char *, sout_access_out_t * ) ;
    sout_input_t * (* sout_MuxAddStream_inner) ( sout_mux_t *, es_format_t * ) ;
    void (* sout_MuxDeleteStream_inner) ( sout_mux_t *, sout_input_t * ) ;
    void (* sout_MuxDelete_inner) ( sout_mux_t * ) ;
    void (* sout_MuxSendBuffer_inner) ( sout_mux_t *, sout_input_t  *, block_t * ) ;
    sout_stream_t * (* sout_StreamNew_inner) ( sout_instance_t *, char *psz_chain ) ;
    void (* sout_StreamDelete_inner) ( sout_stream_t * ) ;
    int (* sout_AnnounceRegister_inner) (sout_instance_t *,session_descriptor_t*, announce_method_t* ) ;
    session_descriptor_t* (* sout_AnnounceRegisterSDP_inner) (sout_instance_t *,char *, announce_method_t* ) ;
    int (* sout_AnnounceUnRegister_inner) (sout_instance_t *,session_descriptor_t* ) ;
    session_descriptor_t* (* sout_AnnounceSessionCreate_inner) () ;
    void (* sout_AnnounceSessionDestroy_inner) (session_descriptor_t *) ;
    announce_method_t* (* sout_AnnounceMethodCreate_inner) (int) ;
    int (* __var_Create_inner) ( vlc_object_t *, const char *, int ) ;
    int (* __var_Destroy_inner) ( vlc_object_t *, const char * ) ;
    int (* __var_Change_inner) ( vlc_object_t *, const char *, int, vlc_value_t *, vlc_value_t * ) ;
    int (* __var_Type_inner) ( vlc_object_t *, const char * ) ;
    int (* __var_Set_inner) ( vlc_object_t *, const char *, vlc_value_t ) ;
    int (* __var_Get_inner) ( vlc_object_t *, const char *, vlc_value_t * ) ;
    int (* __var_AddCallback_inner) ( vlc_object_t *, const char *, vlc_callback_t, void * ) ;
    int (* __var_DelCallback_inner) ( vlc_object_t *, const char *, vlc_callback_t, void * ) ;
    vout_thread_t * (* __vout_Request_inner) ( vlc_object_t *, vout_thread_t *, unsigned int, unsigned int, uint32_t, unsigned int ) ;
    vout_thread_t * (* __vout_Create_inner) ( vlc_object_t *, unsigned int, unsigned int, uint32_t, unsigned int ) ;
    void (* vout_Destroy_inner) ( vout_thread_t * ) ;
    int (* vout_VarCallback_inner) ( vlc_object_t *, const char *, vlc_value_t, vlc_value_t, void * ) ;
    int (* vout_ChromaCmp_inner) ( uint32_t, uint32_t ) ;
    picture_t * (* vout_CreatePicture_inner) ( vout_thread_t *, vlc_bool_t, vlc_bool_t, unsigned int ) ;
    void (* vout_InitFormat_inner) ( video_frame_format_t *, uint32_t, int, int, int ) ;
    void (* vout_DestroyPicture_inner) ( vout_thread_t *, picture_t * ) ;
    void (* vout_DisplayPicture_inner) ( vout_thread_t *, picture_t * ) ;
    void (* vout_DatePicture_inner) ( vout_thread_t *, picture_t *, mtime_t ) ;
    void (* vout_LinkPicture_inner) ( vout_thread_t *, picture_t * ) ;
    void (* vout_UnlinkPicture_inner) ( vout_thread_t *, picture_t * ) ;
    void (* vout_PlacePicture_inner) ( vout_thread_t *, unsigned int, unsigned int, unsigned int *, unsigned int *, unsigned int *, unsigned int * ) ;
    int (* vout_vaControlDefault_inner) ( vout_thread_t *, int, va_list ) ;
    void * (* vout_RequestWindow_inner) ( vout_thread_t *, int *, int *, unsigned int *, unsigned int * ) ;
    void (* vout_ReleaseWindow_inner) ( vout_thread_t *, void * ) ;
    int (* vout_ControlWindow_inner) ( vout_thread_t *, void *, int, va_list ) ;
    access_t * (* __access2_New_inner) ( vlc_object_t *p_obj, char *psz_access, char *psz_demux, char *psz_path ) ;
    void (* access2_Delete_inner) ( access_t * ) ;
    block_t * (* __block_New_inner) ( vlc_object_t *, int ) ;
    block_t * (* block_Realloc_inner) ( block_t *, int i_pre, int i_body ) ;
    block_fifo_t * (* __block_FifoNew_inner) ( vlc_object_t * ) ;
    void (* block_FifoRelease_inner) ( block_fifo_t * ) ;
    void (* block_FifoEmpty_inner) ( block_fifo_t * ) ;
    int (* block_FifoPut_inner) ( block_fifo_t *, block_t * ) ;
    block_t * (* block_FifoGet_inner) ( block_fifo_t * ) ;
    block_t * (* block_FifoShow_inner) ( block_fifo_t * ) ;
        char * (* vlc_strdup_inner) ( const char *s ) ;
        int (* vlc_vasprintf_inner) (char **, const char *, va_list ) ;
        int (* vlc_asprintf_inner) (char **, const char *, ... ) ;
            char * (* vlc_strndup_inner) ( const char *s, size_t n ) ;
        double (* vlc_atof_inner) ( const char *nptr ) ;
        int64_t (* vlc_atoll_inner) ( const char *nptr ) ;
        int64_t (* vlc_strtoll_inner) ( const char *nptr, char **endptr, int base ) ;
        char * (* vlc_getenv_inner) ( const char *name ) ;
            int (* vlc_strcasecmp_inner) ( const char *s1, const char *s2 ) ;
            int (* vlc_strncasecmp_inner) ( const char *s1, const char *s2, size_t n ) ;
            char * (* vlc_strcasestr_inner) ( const char *s1, const char *s2 ) ;
        off_t (* vlc_lseek_inner) ( int fildes, off_t offset, int whence ) ;
    vlc_bool_t (* vlc_reduce_inner) ( int *, int *, int64_t, int64_t, int64_t ) ;
    char ** (* vlc_parse_cmdline_inner) ( const char *, int * ) ;
    char * (* vlc_wraptext_inner) ( const char *, int, vlc_bool_t ) ;
    vlc_iconv_t (* vlc_iconv_open_inner) ( const char *, const char * ) ;
    size_t (* vlc_iconv_inner) ( vlc_iconv_t, char **, size_t *, char **, size_t * ) ;
    int (* vlc_iconv_close_inner) ( vlc_iconv_t ) ;
    char * (* vlc_dgettext_inner) ( const char *package, const char *msgid ) ;
    demux_t * (* __demux2_New_inner) ( vlc_object_t *p_obj, char *psz_access, char *psz_demux, char *psz_path, stream_t *s, es_out_t *out ) ;
    void (* demux2_Delete_inner) ( demux_t * ) ;
    int (* demux2_vaControlHelper_inner) ( stream_t *, int64_t i_start, int64_t i_end, int i_bitrate, int i_align, int i_query, va_list args ) ;
    char const * (* vlc_error_inner) ( int ) ;
    httpd_host_t * (* httpd_HostNew_inner) ( vlc_object_t *, char *psz_host, int i_port ) ;
    httpd_host_t * (* httpd_TLSHostNew_inner) ( vlc_object_t *, char *, int, tls_server_t * ) ;
    void (* httpd_HostDelete_inner) ( httpd_host_t * ) ;
    httpd_url_t * (* httpd_UrlNew_inner) ( httpd_host_t *, char *psz_url, char *psz_user, char *psz_password ) ;
    httpd_url_t * (* httpd_UrlNewUnique_inner) ( httpd_host_t *, char *psz_url, char *psz_user, char *psz_password ) ;
    int (* httpd_UrlCatch_inner) ( httpd_url_t *, int i_msg, httpd_callback_t, httpd_callback_sys_t * ) ;
    void (* httpd_UrlDelete_inner) ( httpd_url_t * ) ;
    void (* httpd_ClientModeStream_inner) ( httpd_client_t *cl ) ;
    void (* httpd_ClientModeBidir_inner) ( httpd_client_t *cl ) ;
    char* (* httpd_ClientIP_inner) ( httpd_client_t *cl ) ;
    httpd_file_t * (* httpd_FileNew_inner) ( httpd_host_t *, char *psz_url, char *psz_mime, char *psz_user, char *psz_password, httpd_file_callback_t pf_fill, httpd_file_sys_t * ) ;
    void (* httpd_FileDelete_inner) ( httpd_file_t * ) ;
    httpd_redirect_t * (* httpd_RedirectNew_inner) ( httpd_host_t *, char *psz_url_dst, char *psz_url_src ) ;
    void (* httpd_RedirectDelete_inner) ( httpd_redirect_t * ) ;
    httpd_stream_t * (* httpd_StreamNew_inner) ( httpd_host_t *, char *psz_url, char *psz_mime, char *psz_user, char *psz_password ) ;
    void (* httpd_StreamDelete_inner) ( httpd_stream_t * ) ;
    int (* httpd_StreamHeader_inner) ( httpd_stream_t *, uint8_t *p_data, int i_data ) ;
    int (* httpd_StreamSend_inner) ( httpd_stream_t *, uint8_t *p_data, int i_data ) ;
    void (* httpd_MsgInit_inner) ( httpd_message_t * )  ;
    void (* httpd_MsgAdd_inner) ( httpd_message_t *, char *psz_name, char *psz_value, ... ) ;
    char * (* httpd_MsgGet_inner) ( httpd_message_t *, char *psz_name ) ;
    void (* httpd_MsgClean_inner) ( httpd_message_t * ) ;
    tls_server_t * (* tls_ServerCreate_inner) ( vlc_object_t *, const char *, const char * ) ;
    void (* tls_ServerDelete_inner) ( tls_server_t * ) ;
    input_thread_t * (* __input_CreateThread_inner) ( vlc_object_t *, input_item_t * ) ;
    void (* input_StopThread_inner) ( input_thread_t * ) ;
    void (* input_DestroyThread_inner) ( input_thread_t * ) ;
    int (* input_vaControl_inner) ( input_thread_t *, int i_query, va_list  ) ;
    int (* input_Control_inner) ( input_thread_t *, int i_query, ...  ) ;
    decoder_t * (* input_DecoderNew_inner) ( input_thread_t *, es_format_t *, vlc_bool_t b_force_decoder ) ;
    void (* input_DecoderDelete_inner) ( decoder_t * ) ;
    void (* input_DecoderDecode_inner) ( decoder_t *, block_t * ) ;
    intf_thread_t * (* __intf_Create_inner) ( vlc_object_t *, const char * ) ;
    int (* intf_RunThread_inner) ( intf_thread_t * ) ;
    void (* intf_StopThread_inner) ( intf_thread_t * ) ;
    void (* intf_Destroy_inner) ( intf_thread_t * ) ;
    void (* __msg_Generic_inner) ( vlc_object_t *, int, const char *, const char *, ... ) ATTRIBUTE_FORMAT( 4, 5 ) ;
    void (* __msg_GenericVa_inner) ( vlc_object_t *, int, const char *, const char *, va_list args ) ;
    void (* __msg_Info_inner) ( vlc_object_t *, const char *, ... ) ATTRIBUTE_FORMAT( 2, 3 ) ;
    void (* __msg_Err_inner) ( vlc_object_t *, const char *, ... ) ATTRIBUTE_FORMAT( 2, 3 ) ;
    void (* __msg_Warn_inner) ( vlc_object_t *, const char *, ... ) ATTRIBUTE_FORMAT( 2, 3 ) ;
    void (* __msg_Dbg_inner) ( vlc_object_t *, const char *, ... ) ATTRIBUTE_FORMAT( 2, 3 ) ;
    msg_subscription_t* (* __msg_Subscribe_inner) ( vlc_object_t * ) ;
    void (* __msg_Unsubscribe_inner) ( vlc_object_t *, msg_subscription_t * ) ;
    void * (* __vlc_object_create_inner) ( vlc_object_t *, int ) ;
    void (* __vlc_object_destroy_inner) ( vlc_object_t * ) ;
    void (* __vlc_object_attach_inner) ( vlc_object_t *, vlc_object_t * ) ;
    void (* __vlc_object_detach_inner) ( vlc_object_t * ) ;
    void * (* __vlc_object_get_inner) ( vlc_object_t *, int ) ;
    void * (* __vlc_object_find_inner) ( vlc_object_t *, int, int ) ;
    void (* __vlc_object_yield_inner) ( vlc_object_t * ) ;
    void (* __vlc_object_release_inner) ( vlc_object_t * ) ;
    vlc_list_t * (* __vlc_list_find_inner) ( vlc_object_t *, int, int ) ;
    void (* vlc_list_release_inner) ( vlc_list_t * ) ;
    void (* playlist_Command_inner) ( playlist_t *, playlist_command_t, int ) ;
    playlist_item_t*  (* __playlist_ItemNew_inner) ( vlc_object_t *,const char *,const char * ) ;
    void (* playlist_ItemDelete_inner) ( playlist_item_t * ) ;
    int (* playlist_ItemAdd_inner) ( playlist_t *, playlist_item_t *, int, int ) ;
    int (* playlist_Add_inner) ( playlist_t *, const char *, const char *, int, int ) ;
    int (* playlist_AddExt_inner) ( playlist_t *, const char *, const char *, int, int, mtime_t, const char **,int ) ;
    int (* playlist_Clear_inner) ( playlist_t * ) ;
    int (* playlist_Delete_inner) ( playlist_t *, int ) ;
    int (* playlist_Disable_inner) ( playlist_t *, int ) ;
    int (* playlist_Enable_inner) ( playlist_t *, int ) ;
    int (* playlist_DisableGroup_inner) ( playlist_t *, int ) ;
    int (* playlist_EnableGroup_inner) ( playlist_t *, int ) ;
    int (* playlist_ItemSetGroup_inner) (playlist_item_t *, int ) ;
    int (* playlist_ItemSetName_inner) (playlist_item_t *,  char * ) ;
    int (* playlist_ItemSetDuration_inner) (playlist_item_t *, mtime_t ) ;
    int (* playlist_SetGroup_inner) (playlist_t * , int , int ) ;
    int (* playlist_SetName_inner) (playlist_t *, int ,  char * ) ;
    int (* playlist_SetDuration_inner) (playlist_t *, int , mtime_t ) ;
    int (* playlist_GetPositionById_inner) (playlist_t *, int) ;
    playlist_item_t * (* playlist_ItemGetById_inner) (playlist_t *, int) ;
    playlist_item_t * (* playlist_ItemGetByPos_inner) (playlist_t *, int) ;
    playlist_group_t * (* playlist_CreateGroup_inner) (playlist_t *, char* ) ;
    int (* playlist_DeleteGroup_inner) (playlist_t *, int ) ;
    char * (* playlist_FindGroup_inner) (playlist_t *, int ) ;
    int (* playlist_GroupToId_inner) (playlist_t *, char * ) ;
    char *  (* playlist_GetInfo_inner) ( playlist_t * , int, const char *, const char *) ;
    char *  (* playlist_ItemGetInfo_inner) ( playlist_item_t * , const char *, const char *) ;
    info_category_t* (* playlist_ItemGetCategory_inner) ( playlist_item_t *, const char *) ;
    info_category_t* (* playlist_ItemCreateCategory_inner) ( playlist_item_t *, const char *) ;
    int (* playlist_AddInfo_inner) (playlist_t *, int, const char * , const char *, const char *, ...) ;
    int (* playlist_ItemAddInfo_inner) (playlist_item_t *, const char * , const char *, const char *, ...) ;
    int (* playlist_ItemAddOption_inner) (playlist_item_t *, const char *) ;
    int (* playlist_Sort_inner) ( playlist_t *, int, int) ;
    int (* playlist_Move_inner) ( playlist_t *, int, int ) ;
    int (* playlist_Import_inner) ( playlist_t *, const char * ) ;
    int (* playlist_Export_inner) ( playlist_t *, const char *, const char * ) ;
    spu_t * (* __spu_Create_inner) ( vlc_object_t * ) ;
    int (* spu_Init_inner) ( spu_t * ) ;
    void (* spu_Destroy_inner) ( spu_t * ) ;
    subpicture_t * (* spu_CreateSubpicture_inner) ( spu_t * ) ;
    void (* spu_DestroySubpicture_inner) ( spu_t *, subpicture_t * ) ;
    void (* spu_DisplaySubpicture_inner) ( spu_t *, subpicture_t * ) ;
    subpicture_region_t * (* __spu_CreateRegion_inner) ( vlc_object_t *, video_format_t * ) ;
    void (* __spu_DestroyRegion_inner) ( vlc_object_t *, subpicture_region_t * ) ;
    subpicture_t * (* spu_SortSubpictures_inner) ( spu_t *, mtime_t ) ;
    void (* spu_RenderSubpictures_inner) ( spu_t *,  video_format_t *, picture_t *, picture_t *, subpicture_t *, int, int ) ;
    char * (* stream_ReadLine_inner) ( stream_t * ) ;
    stream_t * (* __stream_DemuxNew_inner) ( vlc_object_t *p_obj, char *psz_demux, es_out_t *out ) ;
    void (* stream_DemuxSend_inner) ( stream_t *s, block_t *p_block ) ;
    void (* stream_DemuxDelete_inner) ( stream_t *s ) ;
    int (* __vlc_threads_init_inner) ( vlc_object_t * ) ;
    int (* __vlc_threads_end_inner) ( vlc_object_t * ) ;
    int (* __vlc_mutex_init_inner) ( vlc_object_t *, vlc_mutex_t * ) ;
    int (* __vlc_mutex_destroy_inner) ( char *, int, vlc_mutex_t * ) ;
    int (* __vlc_cond_init_inner) ( vlc_object_t *, vlc_cond_t * ) ;
    int (* __vlc_cond_destroy_inner) ( char *, int, vlc_cond_t * ) ;
    int (* __vlc_thread_create_inner) ( vlc_object_t *, char *, int, char *, void * ( * ) ( void * ), int, vlc_bool_t ) ;
    int (* __vlc_thread_set_priority_inner) ( vlc_object_t *, char *, int, int ) ;
    void (* __vlc_thread_ready_inner) ( vlc_object_t * ) ;
    void (* __vlc_thread_join_inner) ( vlc_object_t *, char *, int ) ;
    void (* __vout_CopyPicture_inner) ( vlc_object_t *p_this, picture_t *p_dst, picture_t *p_src ) ;
    int (* __vout_InitPicture_inner) ( vlc_object_t *p_this, picture_t *p_pic, uint32_t i_chroma, int i_width, int i_height, int i_aspect ) ;
    int (* __vout_AllocatePicture_inner) ( vlc_object_t *p_this, picture_t *p_pic, uint32_t i_chroma, int i_width, int i_height, int i_aspect ) ;
    vlm_t * (* __vlm_New_inner) ( vlc_object_t * ) ;
    void (* vlm_Delete_inner) ( vlm_t * ) ;
    int (* vlm_ExecuteCommand_inner) ( vlm_t *, char *, vlm_message_t ** ) ;
    void (* vlm_MessageDelete_inner) ( vlm_message_t* ) ;
    vout_synchro_t * (* __vout_SynchroInit_inner) ( vlc_object_t *, int ) ;
    void (* vout_SynchroRelease_inner) ( vout_synchro_t * ) ;
    void (* vout_SynchroReset_inner) ( vout_synchro_t * ) ;
    vlc_bool_t (* vout_SynchroChoose_inner) ( vout_synchro_t *, int, int ) ;
    void (* vout_SynchroTrash_inner) ( vout_synchro_t * ) ;
    void (* vout_SynchroDecode_inner) ( vout_synchro_t * ) ;
    void (* vout_SynchroEnd_inner) ( vout_synchro_t *, int, vlc_bool_t ) ;
    mtime_t (* vout_SynchroDate_inner) ( vout_synchro_t * ) ;
    void (* vout_SynchroNewPicture_inner) ( vout_synchro_t *, int, int, mtime_t, mtime_t, int ) ;
};
#ifdef __PLUGIN__
#   define aout_FiltersCreatePipeline p_symbols->aout_FiltersCreatePipeline_inner
#   define aout_FiltersDestroyPipeline p_symbols->aout_FiltersDestroyPipeline_inner
#   define aout_FiltersPlay p_symbols->aout_FiltersPlay_inner
#   define aout_OutputNextBuffer p_symbols->aout_OutputNextBuffer_inner
#   define aout_FormatNbChannels p_symbols->aout_FormatNbChannels_inner
#   define aout_FormatPrepare p_symbols->aout_FormatPrepare_inner
#   define aout_FormatPrint p_symbols->aout_FormatPrint_inner
#   define aout_FormatsPrint p_symbols->aout_FormatsPrint_inner
#   define aout_FormatPrintChannels p_symbols->aout_FormatPrintChannels_inner
#   define aout_FifoPop p_symbols->aout_FifoPop_inner
#   define aout_FifoFirstDate p_symbols->aout_FifoFirstDate_inner
#   define aout_VolumeSoftInit p_symbols->aout_VolumeSoftInit_inner
#   define aout_VolumeNoneInit p_symbols->aout_VolumeNoneInit_inner
#   define __aout_New p_symbols->__aout_New_inner
#   define aout_Delete p_symbols->aout_Delete_inner
#   define aout_DateInit p_symbols->aout_DateInit_inner
#   define aout_DateSet p_symbols->aout_DateSet_inner
#   define aout_DateMove p_symbols->aout_DateMove_inner
#   define aout_DateGet p_symbols->aout_DateGet_inner
#   define aout_DateIncrement p_symbols->aout_DateIncrement_inner
#   define aout_CheckChannelReorder p_symbols->aout_CheckChannelReorder_inner
#   define aout_ChannelReorder p_symbols->aout_ChannelReorder_inner
#   define __aout_DecNew p_symbols->__aout_DecNew_inner
#   define aout_DecDelete p_symbols->aout_DecDelete_inner
#   define aout_DecNewBuffer p_symbols->aout_DecNewBuffer_inner
#   define aout_DecDeleteBuffer p_symbols->aout_DecDeleteBuffer_inner
#   define aout_DecPlay p_symbols->aout_DecPlay_inner
#   define __aout_VolumeGet p_symbols->__aout_VolumeGet_inner
#   define __aout_VolumeSet p_symbols->__aout_VolumeSet_inner
#   define __aout_VolumeInfos p_symbols->__aout_VolumeInfos_inner
#   define __aout_VolumeUp p_symbols->__aout_VolumeUp_inner
#   define __aout_VolumeDown p_symbols->__aout_VolumeDown_inner
#   define __aout_VolumeMute p_symbols->__aout_VolumeMute_inner
#   define aout_Restart p_symbols->aout_Restart_inner
#   define aout_FindAndRestart p_symbols->aout_FindAndRestart_inner
#   define aout_ChannelsRestart p_symbols->aout_ChannelsRestart_inner
#   define vlc_current_charset p_symbols->vlc_current_charset_inner
#   define __config_GetType p_symbols->__config_GetType_inner
#   define __config_GetInt p_symbols->__config_GetInt_inner
#   define __config_PutInt p_symbols->__config_PutInt_inner
#   define __config_GetFloat p_symbols->__config_GetFloat_inner
#   define __config_PutFloat p_symbols->__config_PutFloat_inner
#   define __config_GetPsz p_symbols->__config_GetPsz_inner
#   define __config_PutPsz p_symbols->__config_PutPsz_inner
#   define __config_LoadCmdLine p_symbols->__config_LoadCmdLine_inner
#   define config_GetHomeDir p_symbols->config_GetHomeDir_inner
#   define __config_LoadConfigFile p_symbols->__config_LoadConfigFile_inner
#   define __config_SaveConfigFile p_symbols->__config_SaveConfigFile_inner
#   define __config_ResetAll p_symbols->__config_ResetAll_inner
#   define config_FindConfig p_symbols->config_FindConfig_inner
#   define config_FindModule p_symbols->config_FindModule_inner
#   define config_Duplicate p_symbols->config_Duplicate_inner
#   define config_SetCallbacks p_symbols->config_SetCallbacks_inner
#   define config_UnsetCallbacks p_symbols->config_UnsetCallbacks_inner
#   define __intf_Eject p_symbols->__intf_Eject_inner
#   define GetLang_1 p_symbols->GetLang_1_inner
#   define GetLang_2T p_symbols->GetLang_2T_inner
#   define GetLang_2B p_symbols->GetLang_2B_inner
#   define DecodeLanguage p_symbols->DecodeLanguage_inner
#   define __module_Need p_symbols->__module_Need_inner
#   define __module_Unneed p_symbols->__module_Unneed_inner
#   define mstrtime p_symbols->mstrtime_inner
#   define mdate p_symbols->mdate_inner
#   define mwait p_symbols->mwait_inner
#   define msleep p_symbols->msleep_inner
#   define secstotimestr p_symbols->secstotimestr_inner
#   define date_Init p_symbols->date_Init_inner
#   define date_Change p_symbols->date_Change_inner
#   define date_Set p_symbols->date_Set_inner
#   define date_Get p_symbols->date_Get_inner
#   define date_Move p_symbols->date_Move_inner
#   define date_Increment p_symbols->date_Increment_inner
#   define __net_OpenTCP p_symbols->__net_OpenTCP_inner
#   define __net_ListenTCP p_symbols->__net_ListenTCP_inner
#   define __net_Accept p_symbols->__net_Accept_inner
#   define __net_OpenUDP p_symbols->__net_OpenUDP_inner
#   define net_Close p_symbols->net_Close_inner
#   define __net_Read p_symbols->__net_Read_inner
#   define __net_ReadNonBlock p_symbols->__net_ReadNonBlock_inner
#   define __net_Select p_symbols->__net_Select_inner
#   define __net_Write p_symbols->__net_Write_inner
#   define __net_Gets p_symbols->__net_Gets_inner
#   define net_Printf p_symbols->net_Printf_inner
#   define __net_vaPrintf p_symbols->__net_vaPrintf_inner
#   define vout_ShowTextRelative p_symbols->vout_ShowTextRelative_inner
#   define vout_ShowTextAbsolute p_symbols->vout_ShowTextAbsolute_inner
#   define __vout_OSDMessage p_symbols->__vout_OSDMessage_inner
#   define vout_OSDSlider p_symbols->vout_OSDSlider_inner
#   define vout_OSDIcon p_symbols->vout_OSDIcon_inner
#   define __sout_CfgParse p_symbols->__sout_CfgParse_inner
#   define sout_CfgCreate p_symbols->sout_CfgCreate_inner
#   define __sout_NewInstance p_symbols->__sout_NewInstance_inner
#   define sout_DeleteInstance p_symbols->sout_DeleteInstance_inner
#   define sout_InputNew p_symbols->sout_InputNew_inner
#   define sout_InputDelete p_symbols->sout_InputDelete_inner
#   define sout_InputSendBuffer p_symbols->sout_InputSendBuffer_inner
#   define sout_AccessOutNew p_symbols->sout_AccessOutNew_inner
#   define sout_AccessOutDelete p_symbols->sout_AccessOutDelete_inner
#   define sout_AccessOutSeek p_symbols->sout_AccessOutSeek_inner
#   define sout_AccessOutRead p_symbols->sout_AccessOutRead_inner
#   define sout_AccessOutWrite p_symbols->sout_AccessOutWrite_inner
#   define sout_MuxNew p_symbols->sout_MuxNew_inner
#   define sout_MuxAddStream p_symbols->sout_MuxAddStream_inner
#   define sout_MuxDeleteStream p_symbols->sout_MuxDeleteStream_inner
#   define sout_MuxDelete p_symbols->sout_MuxDelete_inner
#   define sout_MuxSendBuffer p_symbols->sout_MuxSendBuffer_inner
#   define sout_StreamNew p_symbols->sout_StreamNew_inner
#   define sout_StreamDelete p_symbols->sout_StreamDelete_inner
#   define sout_AnnounceRegister p_symbols->sout_AnnounceRegister_inner
#   define sout_AnnounceRegisterSDP p_symbols->sout_AnnounceRegisterSDP_inner
#   define sout_AnnounceUnRegister p_symbols->sout_AnnounceUnRegister_inner
#   define sout_AnnounceSessionCreate p_symbols->sout_AnnounceSessionCreate_inner
#   define sout_AnnounceSessionDestroy p_symbols->sout_AnnounceSessionDestroy_inner
#   define sout_AnnounceMethodCreate p_symbols->sout_AnnounceMethodCreate_inner
#   define __var_Create p_symbols->__var_Create_inner
#   define __var_Destroy p_symbols->__var_Destroy_inner
#   define __var_Change p_symbols->__var_Change_inner
#   define __var_Type p_symbols->__var_Type_inner
#   define __var_Set p_symbols->__var_Set_inner
#   define __var_Get p_symbols->__var_Get_inner
#   define __var_AddCallback p_symbols->__var_AddCallback_inner
#   define __var_DelCallback p_symbols->__var_DelCallback_inner
#   define __vout_Request p_symbols->__vout_Request_inner
#   define __vout_Create p_symbols->__vout_Create_inner
#   define vout_Destroy p_symbols->vout_Destroy_inner
#   define vout_VarCallback p_symbols->vout_VarCallback_inner
#   define vout_ChromaCmp p_symbols->vout_ChromaCmp_inner
#   define vout_CreatePicture p_symbols->vout_CreatePicture_inner
#   define vout_InitFormat p_symbols->vout_InitFormat_inner
#   define vout_DestroyPicture p_symbols->vout_DestroyPicture_inner
#   define vout_DisplayPicture p_symbols->vout_DisplayPicture_inner
#   define vout_DatePicture p_symbols->vout_DatePicture_inner
#   define vout_LinkPicture p_symbols->vout_LinkPicture_inner
#   define vout_UnlinkPicture p_symbols->vout_UnlinkPicture_inner
#   define vout_PlacePicture p_symbols->vout_PlacePicture_inner
#   define vout_vaControlDefault p_symbols->vout_vaControlDefault_inner
#   define vout_RequestWindow p_symbols->vout_RequestWindow_inner
#   define vout_ReleaseWindow p_symbols->vout_ReleaseWindow_inner
#   define vout_ControlWindow p_symbols->vout_ControlWindow_inner
#   define __access2_New p_symbols->__access2_New_inner
#   define access2_Delete p_symbols->access2_Delete_inner
#   define __block_New p_symbols->__block_New_inner
#   define block_Realloc p_symbols->block_Realloc_inner
#   define __block_FifoNew p_symbols->__block_FifoNew_inner
#   define block_FifoRelease p_symbols->block_FifoRelease_inner
#   define block_FifoEmpty p_symbols->block_FifoEmpty_inner
#   define block_FifoPut p_symbols->block_FifoPut_inner
#   define block_FifoGet p_symbols->block_FifoGet_inner
#   define block_FifoShow p_symbols->block_FifoShow_inner
    #   define vlc_strdup p_symbols->vlc_strdup_inner
    #   define vlc_vasprintf p_symbols->vlc_vasprintf_inner
    #   define vlc_asprintf p_symbols->vlc_asprintf_inner
        #   define vlc_strndup p_symbols->vlc_strndup_inner
    #   define vlc_atof p_symbols->vlc_atof_inner
    #   define vlc_atoll p_symbols->vlc_atoll_inner
    #   define vlc_strtoll p_symbols->vlc_strtoll_inner
    #   define vlc_getenv p_symbols->vlc_getenv_inner
        #   define vlc_strcasecmp p_symbols->vlc_strcasecmp_inner
        #   define vlc_strncasecmp p_symbols->vlc_strncasecmp_inner
        #   define vlc_strcasestr p_symbols->vlc_strcasestr_inner
    #   define vlc_lseek p_symbols->vlc_lseek_inner
#   define vlc_reduce p_symbols->vlc_reduce_inner
#   define vlc_parse_cmdline p_symbols->vlc_parse_cmdline_inner
#   define vlc_wraptext p_symbols->vlc_wraptext_inner
#   define vlc_iconv_open p_symbols->vlc_iconv_open_inner
#   define vlc_iconv p_symbols->vlc_iconv_inner
#   define vlc_iconv_close p_symbols->vlc_iconv_close_inner
#   define vlc_dgettext p_symbols->vlc_dgettext_inner
#   define __demux2_New p_symbols->__demux2_New_inner
#   define demux2_Delete p_symbols->demux2_Delete_inner
#   define demux2_vaControlHelper p_symbols->demux2_vaControlHelper_inner
#   define vlc_error p_symbols->vlc_error_inner
#   define httpd_HostNew p_symbols->httpd_HostNew_inner
#   define httpd_TLSHostNew p_symbols->httpd_TLSHostNew_inner
#   define httpd_HostDelete p_symbols->httpd_HostDelete_inner
#   define httpd_UrlNew p_symbols->httpd_UrlNew_inner
#   define httpd_UrlNewUnique p_symbols->httpd_UrlNewUnique_inner
#   define httpd_UrlCatch p_symbols->httpd_UrlCatch_inner
#   define httpd_UrlDelete p_symbols->httpd_UrlDelete_inner
#   define httpd_ClientModeStream p_symbols->httpd_ClientModeStream_inner
#   define httpd_ClientModeBidir p_symbols->httpd_ClientModeBidir_inner
#   define httpd_ClientIP p_symbols->httpd_ClientIP_inner
#   define httpd_FileNew p_symbols->httpd_FileNew_inner
#   define httpd_FileDelete p_symbols->httpd_FileDelete_inner
#   define httpd_RedirectNew p_symbols->httpd_RedirectNew_inner
#   define httpd_RedirectDelete p_symbols->httpd_RedirectDelete_inner
#   define httpd_StreamNew p_symbols->httpd_StreamNew_inner
#   define httpd_StreamDelete p_symbols->httpd_StreamDelete_inner
#   define httpd_StreamHeader p_symbols->httpd_StreamHeader_inner
#   define httpd_StreamSend p_symbols->httpd_StreamSend_inner
#   define httpd_MsgInit p_symbols->httpd_MsgInit_inner
#   define httpd_MsgAdd p_symbols->httpd_MsgAdd_inner
#   define httpd_MsgGet p_symbols->httpd_MsgGet_inner
#   define httpd_MsgClean p_symbols->httpd_MsgClean_inner
#   define tls_ServerCreate p_symbols->tls_ServerCreate_inner
#   define tls_ServerDelete p_symbols->tls_ServerDelete_inner
#   define __input_CreateThread p_symbols->__input_CreateThread_inner
#   define input_StopThread p_symbols->input_StopThread_inner
#   define input_DestroyThread p_symbols->input_DestroyThread_inner
#   define input_vaControl p_symbols->input_vaControl_inner
#   define input_Control p_symbols->input_Control_inner
#   define input_DecoderNew p_symbols->input_DecoderNew_inner
#   define input_DecoderDelete p_symbols->input_DecoderDelete_inner
#   define input_DecoderDecode p_symbols->input_DecoderDecode_inner
#   define __intf_Create p_symbols->__intf_Create_inner
#   define intf_RunThread p_symbols->intf_RunThread_inner
#   define intf_StopThread p_symbols->intf_StopThread_inner
#   define intf_Destroy p_symbols->intf_Destroy_inner
#   define __msg_Generic p_symbols->__msg_Generic_inner
#   define __msg_GenericVa p_symbols->__msg_GenericVa_inner
#   define __msg_Info p_symbols->__msg_Info_inner
#   define __msg_Err p_symbols->__msg_Err_inner
#   define __msg_Warn p_symbols->__msg_Warn_inner
#   define __msg_Dbg p_symbols->__msg_Dbg_inner
#   define __msg_Subscribe p_symbols->__msg_Subscribe_inner
#   define __msg_Unsubscribe p_symbols->__msg_Unsubscribe_inner
#   define __vlc_object_create p_symbols->__vlc_object_create_inner
#   define __vlc_object_destroy p_symbols->__vlc_object_destroy_inner
#   define __vlc_object_attach p_symbols->__vlc_object_attach_inner
#   define __vlc_object_detach p_symbols->__vlc_object_detach_inner
#   define __vlc_object_get p_symbols->__vlc_object_get_inner
#   define __vlc_object_find p_symbols->__vlc_object_find_inner
#   define __vlc_object_yield p_symbols->__vlc_object_yield_inner
#   define __vlc_object_release p_symbols->__vlc_object_release_inner
#   define __vlc_list_find p_symbols->__vlc_list_find_inner
#   define vlc_list_release p_symbols->vlc_list_release_inner
#   define playlist_Command p_symbols->playlist_Command_inner
#   define __playlist_ItemNew p_symbols->__playlist_ItemNew_inner
#   define playlist_ItemDelete p_symbols->playlist_ItemDelete_inner
#   define playlist_ItemAdd p_symbols->playlist_ItemAdd_inner
#   define playlist_Add p_symbols->playlist_Add_inner
#   define playlist_AddExt p_symbols->playlist_AddExt_inner
#   define playlist_Clear p_symbols->playlist_Clear_inner
#   define playlist_Delete p_symbols->playlist_Delete_inner
#   define playlist_Disable p_symbols->playlist_Disable_inner
#   define playlist_Enable p_symbols->playlist_Enable_inner
#   define playlist_DisableGroup p_symbols->playlist_DisableGroup_inner
#   define playlist_EnableGroup p_symbols->playlist_EnableGroup_inner
#   define playlist_ItemSetGroup p_symbols->playlist_ItemSetGroup_inner
#   define playlist_ItemSetName p_symbols->playlist_ItemSetName_inner
#   define playlist_ItemSetDuration p_symbols->playlist_ItemSetDuration_inner
#   define playlist_SetGroup p_symbols->playlist_SetGroup_inner
#   define playlist_SetName p_symbols->playlist_SetName_inner
#   define playlist_SetDuration p_symbols->playlist_SetDuration_inner
#   define playlist_GetPositionById p_symbols->playlist_GetPositionById_inner
#   define playlist_ItemGetById p_symbols->playlist_ItemGetById_inner
#   define playlist_ItemGetByPos p_symbols->playlist_ItemGetByPos_inner
#   define playlist_CreateGroup p_symbols->playlist_CreateGroup_inner
#   define playlist_DeleteGroup p_symbols->playlist_DeleteGroup_inner
#   define playlist_FindGroup p_symbols->playlist_FindGroup_inner
#   define playlist_GroupToId p_symbols->playlist_GroupToId_inner
#   define playlist_GetInfo p_symbols->playlist_GetInfo_inner
#   define playlist_ItemGetInfo p_symbols->playlist_ItemGetInfo_inner
#   define playlist_ItemGetCategory p_symbols->playlist_ItemGetCategory_inner
#   define playlist_ItemCreateCategory p_symbols->playlist_ItemCreateCategory_inner
#   define playlist_AddInfo p_symbols->playlist_AddInfo_inner
#   define playlist_ItemAddInfo p_symbols->playlist_ItemAddInfo_inner
#   define playlist_ItemAddOption p_symbols->playlist_ItemAddOption_inner
#   define playlist_Sort p_symbols->playlist_Sort_inner
#   define playlist_Move p_symbols->playlist_Move_inner
#   define playlist_Import p_symbols->playlist_Import_inner
#   define playlist_Export p_symbols->playlist_Export_inner
#   define __spu_Create p_symbols->__spu_Create_inner
#   define spu_Init p_symbols->spu_Init_inner
#   define spu_Destroy p_symbols->spu_Destroy_inner
#   define spu_CreateSubpicture p_symbols->spu_CreateSubpicture_inner
#   define spu_DestroySubpicture p_symbols->spu_DestroySubpicture_inner
#   define spu_DisplaySubpicture p_symbols->spu_DisplaySubpicture_inner
#   define __spu_CreateRegion p_symbols->__spu_CreateRegion_inner
#   define __spu_DestroyRegion p_symbols->__spu_DestroyRegion_inner
#   define spu_SortSubpictures p_symbols->spu_SortSubpictures_inner
#   define spu_RenderSubpictures p_symbols->spu_RenderSubpictures_inner
#   define stream_ReadLine p_symbols->stream_ReadLine_inner
#   define __stream_DemuxNew p_symbols->__stream_DemuxNew_inner
#   define stream_DemuxSend p_symbols->stream_DemuxSend_inner
#   define stream_DemuxDelete p_symbols->stream_DemuxDelete_inner
#   define __vlc_threads_init p_symbols->__vlc_threads_init_inner
#   define __vlc_threads_end p_symbols->__vlc_threads_end_inner
#   define __vlc_mutex_init p_symbols->__vlc_mutex_init_inner
#   define __vlc_mutex_destroy p_symbols->__vlc_mutex_destroy_inner
#   define __vlc_cond_init p_symbols->__vlc_cond_init_inner
#   define __vlc_cond_destroy p_symbols->__vlc_cond_destroy_inner
#   define __vlc_thread_create p_symbols->__vlc_thread_create_inner
#   define __vlc_thread_set_priority p_symbols->__vlc_thread_set_priority_inner
#   define __vlc_thread_ready p_symbols->__vlc_thread_ready_inner
#   define __vlc_thread_join p_symbols->__vlc_thread_join_inner
#   define __vout_CopyPicture p_symbols->__vout_CopyPicture_inner
#   define __vout_InitPicture p_symbols->__vout_InitPicture_inner
#   define __vout_AllocatePicture p_symbols->__vout_AllocatePicture_inner
#   define __vlm_New p_symbols->__vlm_New_inner
#   define vlm_Delete p_symbols->vlm_Delete_inner
#   define vlm_ExecuteCommand p_symbols->vlm_ExecuteCommand_inner
#   define vlm_MessageDelete p_symbols->vlm_MessageDelete_inner
#   define __vout_SynchroInit p_symbols->__vout_SynchroInit_inner
#   define vout_SynchroRelease p_symbols->vout_SynchroRelease_inner
#   define vout_SynchroReset p_symbols->vout_SynchroReset_inner
#   define vout_SynchroChoose p_symbols->vout_SynchroChoose_inner
#   define vout_SynchroTrash p_symbols->vout_SynchroTrash_inner
#   define vout_SynchroDecode p_symbols->vout_SynchroDecode_inner
#   define vout_SynchroEnd p_symbols->vout_SynchroEnd_inner
#   define vout_SynchroDate p_symbols->vout_SynchroDate_inner
#   define vout_SynchroNewPicture p_symbols->vout_SynchroNewPicture_inner
#endif /* __PLUGIN__ */
