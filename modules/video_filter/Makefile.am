
# Autogenerated by bootstrap - DO NOT EDIT - edit Modules.am instead

NULL =
libvlc_LIBRARIES =
noinst_LIBRARIES =
noinst_HEADERS =
EXTRA_DIST = Modules.am
BUILT_SOURCES =
SUBDIRS = swscale
#DIST_SUBDIRS = $(SUBDIRS)
libvlcdir = $(libdir)/vlc/video_filter
include Modules.am

if BUILD_MOZILLA
if HAVE_WIN32
# There's no need for pic code on win32 so get rid of this to substantially
# reduce the compilation time.
pic = no
endif
else
pic = no
endif

clean-local:
	-rm -f *.a *.so *.dll *.sl *.dylib

all: all-modules
all-modules:
	@set fnord $$MAKEFLAGS; amf=$$2; targets=`\
	if test "$(plugin)" != "no"; then z=$$($(VLC_CONFIG) --target plugin); for mod in transform invert adjust distort wall clone crop motionblur logo deinterlace blend scale time marq; do case "$$z" in */lib$${mod}_plugin*) echo lib$${mod}_plugin$(LIBEXT);; esac; done; fi; \
	if test "$(builtin)" != "no"; then z=$$($(VLC_CONFIG) --target builtin); for mod in transform invert adjust distort wall clone crop motionblur logo deinterlace blend scale time marq; do case "$$z" in */lib$${mod}.a*) echo lib$${mod}.a;; esac; done; fi; \
	if test "$(pic)" != "no"; then z=$$($(VLC_CONFIG) --target builtin pic); for mod in transform invert adjust distort wall clone crop motionblur logo deinterlace blend scale time marq; do case "$$z" in */lib$${mod}_pic.a*) echo lib$${mod}_pic.a;; esac; done; fi; \
	`; case "$$targets" in *lib*) $(MAKE) $(AM_MAKEFLAGS) $$targets || case "$$amf" in *=*) exit 1;; *k*) fail=yes;; *) exit 1;; esac; ;; esac; \
	test -z "$$fail"

# The transform plugin

if UNTRUE
Ltransformp = libtransform_plugin.a
Dtransformp = libtransform_plugin$(LIBEXT)
Ltransformb = libtransform.a
Ltransformpic = libtransform_pic.a
endif

libtransform_plugin_a_SOURCES = $(SOURCES_transform)
libtransform_plugin_a_CFLAGS = `$(VLC_CONFIG) --cflags plugin transform`
libtransform_plugin_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags plugin transform`
libtransform_plugin_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags plugin transform`

libtransform_pic_a_SOURCES = $(SOURCES_transform)
libtransform_pic_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin pic transform`
libtransform_pic_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin pic transform`
libtransform_pic_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin pic transform`

libtransform_a_SOURCES = $(SOURCES_transform)
libtransform_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin transform`
libtransform_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin transform`
libtransform_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin transform`

libvlc_LIBRARIES += $(Ltransformb) $(Ltransformpic)
libtransform_DATA = $(Dtransformp)

libtransformdir = $(libdir)/vlc/
noinst_LIBRARIES += $(Ltransformp)
libtransform_plugin$(LIBEXT): $(libtransform_plugin_a_OBJECTS)
	@case `$(VLC_CONFIG) --linkage transform` in \
	  c++) echo $(CXXLINK) $(libtransform_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin transform\` ; $(CXXLINK) $(libtransform_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin transform` ;; \
	  objc) echo $(OBJCLINK) $(libtransform_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin transform\` ; $(OBJCLINK) $(libtransform_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin transform` ;; \
	  c|*) echo $(LINK) $(libtransform_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin transform\` ; $(LINK) $(libtransform_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin transform` ;; \
	esac


# The invert plugin

if UNTRUE
Linvertp = libinvert_plugin.a
Dinvertp = libinvert_plugin$(LIBEXT)
Linvertb = libinvert.a
Linvertpic = libinvert_pic.a
endif

libinvert_plugin_a_SOURCES = $(SOURCES_invert)
libinvert_plugin_a_CFLAGS = `$(VLC_CONFIG) --cflags plugin invert`
libinvert_plugin_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags plugin invert`
libinvert_plugin_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags plugin invert`

libinvert_pic_a_SOURCES = $(SOURCES_invert)
libinvert_pic_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin pic invert`
libinvert_pic_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin pic invert`
libinvert_pic_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin pic invert`

libinvert_a_SOURCES = $(SOURCES_invert)
libinvert_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin invert`
libinvert_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin invert`
libinvert_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin invert`

libvlc_LIBRARIES += $(Linvertb) $(Linvertpic)
libinvert_DATA = $(Dinvertp)

libinvertdir = $(libdir)/vlc/
noinst_LIBRARIES += $(Linvertp)
libinvert_plugin$(LIBEXT): $(libinvert_plugin_a_OBJECTS)
	@case `$(VLC_CONFIG) --linkage invert` in \
	  c++) echo $(CXXLINK) $(libinvert_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin invert\` ; $(CXXLINK) $(libinvert_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin invert` ;; \
	  objc) echo $(OBJCLINK) $(libinvert_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin invert\` ; $(OBJCLINK) $(libinvert_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin invert` ;; \
	  c|*) echo $(LINK) $(libinvert_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin invert\` ; $(LINK) $(libinvert_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin invert` ;; \
	esac


# The adjust plugin

if UNTRUE
Ladjustp = libadjust_plugin.a
Dadjustp = libadjust_plugin$(LIBEXT)
Ladjustb = libadjust.a
Ladjustpic = libadjust_pic.a
endif

libadjust_plugin_a_SOURCES = $(SOURCES_adjust)
libadjust_plugin_a_CFLAGS = `$(VLC_CONFIG) --cflags plugin adjust`
libadjust_plugin_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags plugin adjust`
libadjust_plugin_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags plugin adjust`

libadjust_pic_a_SOURCES = $(SOURCES_adjust)
libadjust_pic_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin pic adjust`
libadjust_pic_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin pic adjust`
libadjust_pic_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin pic adjust`

libadjust_a_SOURCES = $(SOURCES_adjust)
libadjust_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin adjust`
libadjust_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin adjust`
libadjust_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin adjust`

libvlc_LIBRARIES += $(Ladjustb) $(Ladjustpic)
libadjust_DATA = $(Dadjustp)

libadjustdir = $(libdir)/vlc/
noinst_LIBRARIES += $(Ladjustp)
libadjust_plugin$(LIBEXT): $(libadjust_plugin_a_OBJECTS)
	@case `$(VLC_CONFIG) --linkage adjust` in \
	  c++) echo $(CXXLINK) $(libadjust_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin adjust\` ; $(CXXLINK) $(libadjust_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin adjust` ;; \
	  objc) echo $(OBJCLINK) $(libadjust_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin adjust\` ; $(OBJCLINK) $(libadjust_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin adjust` ;; \
	  c|*) echo $(LINK) $(libadjust_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin adjust\` ; $(LINK) $(libadjust_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin adjust` ;; \
	esac


# The distort plugin

if UNTRUE
Ldistortp = libdistort_plugin.a
Ddistortp = libdistort_plugin$(LIBEXT)
Ldistortb = libdistort.a
Ldistortpic = libdistort_pic.a
endif

libdistort_plugin_a_SOURCES = $(SOURCES_distort)
libdistort_plugin_a_CFLAGS = `$(VLC_CONFIG) --cflags plugin distort`
libdistort_plugin_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags plugin distort`
libdistort_plugin_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags plugin distort`

libdistort_pic_a_SOURCES = $(SOURCES_distort)
libdistort_pic_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin pic distort`
libdistort_pic_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin pic distort`
libdistort_pic_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin pic distort`

libdistort_a_SOURCES = $(SOURCES_distort)
libdistort_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin distort`
libdistort_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin distort`
libdistort_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin distort`

libvlc_LIBRARIES += $(Ldistortb) $(Ldistortpic)
libdistort_DATA = $(Ddistortp)

libdistortdir = $(libdir)/vlc/
noinst_LIBRARIES += $(Ldistortp)
libdistort_plugin$(LIBEXT): $(libdistort_plugin_a_OBJECTS)
	@case `$(VLC_CONFIG) --linkage distort` in \
	  c++) echo $(CXXLINK) $(libdistort_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin distort\` ; $(CXXLINK) $(libdistort_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin distort` ;; \
	  objc) echo $(OBJCLINK) $(libdistort_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin distort\` ; $(OBJCLINK) $(libdistort_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin distort` ;; \
	  c|*) echo $(LINK) $(libdistort_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin distort\` ; $(LINK) $(libdistort_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin distort` ;; \
	esac


# The wall plugin

if UNTRUE
Lwallp = libwall_plugin.a
Dwallp = libwall_plugin$(LIBEXT)
Lwallb = libwall.a
Lwallpic = libwall_pic.a
endif

libwall_plugin_a_SOURCES = $(SOURCES_wall)
libwall_plugin_a_CFLAGS = `$(VLC_CONFIG) --cflags plugin wall`
libwall_plugin_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags plugin wall`
libwall_plugin_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags plugin wall`

libwall_pic_a_SOURCES = $(SOURCES_wall)
libwall_pic_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin pic wall`
libwall_pic_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin pic wall`
libwall_pic_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin pic wall`

libwall_a_SOURCES = $(SOURCES_wall)
libwall_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin wall`
libwall_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin wall`
libwall_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin wall`

libvlc_LIBRARIES += $(Lwallb) $(Lwallpic)
libwall_DATA = $(Dwallp)

libwalldir = $(libdir)/vlc/
noinst_LIBRARIES += $(Lwallp)
libwall_plugin$(LIBEXT): $(libwall_plugin_a_OBJECTS)
	@case `$(VLC_CONFIG) --linkage wall` in \
	  c++) echo $(CXXLINK) $(libwall_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin wall\` ; $(CXXLINK) $(libwall_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin wall` ;; \
	  objc) echo $(OBJCLINK) $(libwall_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin wall\` ; $(OBJCLINK) $(libwall_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin wall` ;; \
	  c|*) echo $(LINK) $(libwall_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin wall\` ; $(LINK) $(libwall_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin wall` ;; \
	esac


# The clone plugin

if UNTRUE
Lclonep = libclone_plugin.a
Dclonep = libclone_plugin$(LIBEXT)
Lcloneb = libclone.a
Lclonepic = libclone_pic.a
endif

libclone_plugin_a_SOURCES = $(SOURCES_clone)
libclone_plugin_a_CFLAGS = `$(VLC_CONFIG) --cflags plugin clone`
libclone_plugin_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags plugin clone`
libclone_plugin_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags plugin clone`

libclone_pic_a_SOURCES = $(SOURCES_clone)
libclone_pic_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin pic clone`
libclone_pic_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin pic clone`
libclone_pic_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin pic clone`

libclone_a_SOURCES = $(SOURCES_clone)
libclone_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin clone`
libclone_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin clone`
libclone_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin clone`

libvlc_LIBRARIES += $(Lcloneb) $(Lclonepic)
libclone_DATA = $(Dclonep)

libclonedir = $(libdir)/vlc/
noinst_LIBRARIES += $(Lclonep)
libclone_plugin$(LIBEXT): $(libclone_plugin_a_OBJECTS)
	@case `$(VLC_CONFIG) --linkage clone` in \
	  c++) echo $(CXXLINK) $(libclone_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin clone\` ; $(CXXLINK) $(libclone_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin clone` ;; \
	  objc) echo $(OBJCLINK) $(libclone_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin clone\` ; $(OBJCLINK) $(libclone_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin clone` ;; \
	  c|*) echo $(LINK) $(libclone_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin clone\` ; $(LINK) $(libclone_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin clone` ;; \
	esac


# The crop plugin

if UNTRUE
Lcropp = libcrop_plugin.a
Dcropp = libcrop_plugin$(LIBEXT)
Lcropb = libcrop.a
Lcroppic = libcrop_pic.a
endif

libcrop_plugin_a_SOURCES = $(SOURCES_crop)
libcrop_plugin_a_CFLAGS = `$(VLC_CONFIG) --cflags plugin crop`
libcrop_plugin_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags plugin crop`
libcrop_plugin_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags plugin crop`

libcrop_pic_a_SOURCES = $(SOURCES_crop)
libcrop_pic_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin pic crop`
libcrop_pic_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin pic crop`
libcrop_pic_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin pic crop`

libcrop_a_SOURCES = $(SOURCES_crop)
libcrop_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin crop`
libcrop_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin crop`
libcrop_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin crop`

libvlc_LIBRARIES += $(Lcropb) $(Lcroppic)
libcrop_DATA = $(Dcropp)

libcropdir = $(libdir)/vlc/
noinst_LIBRARIES += $(Lcropp)
libcrop_plugin$(LIBEXT): $(libcrop_plugin_a_OBJECTS)
	@case `$(VLC_CONFIG) --linkage crop` in \
	  c++) echo $(CXXLINK) $(libcrop_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin crop\` ; $(CXXLINK) $(libcrop_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin crop` ;; \
	  objc) echo $(OBJCLINK) $(libcrop_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin crop\` ; $(OBJCLINK) $(libcrop_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin crop` ;; \
	  c|*) echo $(LINK) $(libcrop_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin crop\` ; $(LINK) $(libcrop_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin crop` ;; \
	esac


# The motionblur plugin

if UNTRUE
Lmotionblurp = libmotionblur_plugin.a
Dmotionblurp = libmotionblur_plugin$(LIBEXT)
Lmotionblurb = libmotionblur.a
Lmotionblurpic = libmotionblur_pic.a
endif

libmotionblur_plugin_a_SOURCES = $(SOURCES_motionblur)
libmotionblur_plugin_a_CFLAGS = `$(VLC_CONFIG) --cflags plugin motionblur`
libmotionblur_plugin_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags plugin motionblur`
libmotionblur_plugin_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags plugin motionblur`

libmotionblur_pic_a_SOURCES = $(SOURCES_motionblur)
libmotionblur_pic_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin pic motionblur`
libmotionblur_pic_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin pic motionblur`
libmotionblur_pic_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin pic motionblur`

libmotionblur_a_SOURCES = $(SOURCES_motionblur)
libmotionblur_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin motionblur`
libmotionblur_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin motionblur`
libmotionblur_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin motionblur`

libvlc_LIBRARIES += $(Lmotionblurb) $(Lmotionblurpic)
libmotionblur_DATA = $(Dmotionblurp)

libmotionblurdir = $(libdir)/vlc/
noinst_LIBRARIES += $(Lmotionblurp)
libmotionblur_plugin$(LIBEXT): $(libmotionblur_plugin_a_OBJECTS)
	@case `$(VLC_CONFIG) --linkage motionblur` in \
	  c++) echo $(CXXLINK) $(libmotionblur_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin motionblur\` ; $(CXXLINK) $(libmotionblur_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin motionblur` ;; \
	  objc) echo $(OBJCLINK) $(libmotionblur_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin motionblur\` ; $(OBJCLINK) $(libmotionblur_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin motionblur` ;; \
	  c|*) echo $(LINK) $(libmotionblur_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin motionblur\` ; $(LINK) $(libmotionblur_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin motionblur` ;; \
	esac


# The logo plugin

if UNTRUE
Llogop = liblogo_plugin.a
Dlogop = liblogo_plugin$(LIBEXT)
Llogob = liblogo.a
Llogopic = liblogo_pic.a
endif

liblogo_plugin_a_SOURCES = $(SOURCES_logo)
liblogo_plugin_a_CFLAGS = `$(VLC_CONFIG) --cflags plugin logo`
liblogo_plugin_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags plugin logo`
liblogo_plugin_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags plugin logo`

liblogo_pic_a_SOURCES = $(SOURCES_logo)
liblogo_pic_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin pic logo`
liblogo_pic_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin pic logo`
liblogo_pic_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin pic logo`

liblogo_a_SOURCES = $(SOURCES_logo)
liblogo_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin logo`
liblogo_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin logo`
liblogo_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin logo`

libvlc_LIBRARIES += $(Llogob) $(Llogopic)
liblogo_DATA = $(Dlogop)

liblogodir = $(libdir)/vlc/
noinst_LIBRARIES += $(Llogop)
liblogo_plugin$(LIBEXT): $(liblogo_plugin_a_OBJECTS)
	@case `$(VLC_CONFIG) --linkage logo` in \
	  c++) echo $(CXXLINK) $(liblogo_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin logo\` ; $(CXXLINK) $(liblogo_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin logo` ;; \
	  objc) echo $(OBJCLINK) $(liblogo_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin logo\` ; $(OBJCLINK) $(liblogo_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin logo` ;; \
	  c|*) echo $(LINK) $(liblogo_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin logo\` ; $(LINK) $(liblogo_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin logo` ;; \
	esac


# The deinterlace plugin

if UNTRUE
Ldeinterlacep = libdeinterlace_plugin.a
Ddeinterlacep = libdeinterlace_plugin$(LIBEXT)
Ldeinterlaceb = libdeinterlace.a
Ldeinterlacepic = libdeinterlace_pic.a
endif

libdeinterlace_plugin_a_SOURCES = $(SOURCES_deinterlace)
libdeinterlace_plugin_a_CFLAGS = `$(VLC_CONFIG) --cflags plugin deinterlace`
libdeinterlace_plugin_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags plugin deinterlace`
libdeinterlace_plugin_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags plugin deinterlace`

libdeinterlace_pic_a_SOURCES = $(SOURCES_deinterlace)
libdeinterlace_pic_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin pic deinterlace`
libdeinterlace_pic_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin pic deinterlace`
libdeinterlace_pic_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin pic deinterlace`

libdeinterlace_a_SOURCES = $(SOURCES_deinterlace)
libdeinterlace_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin deinterlace`
libdeinterlace_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin deinterlace`
libdeinterlace_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin deinterlace`

libvlc_LIBRARIES += $(Ldeinterlaceb) $(Ldeinterlacepic)
libdeinterlace_DATA = $(Ddeinterlacep)

libdeinterlacedir = $(libdir)/vlc/
noinst_LIBRARIES += $(Ldeinterlacep)
libdeinterlace_plugin$(LIBEXT): $(libdeinterlace_plugin_a_OBJECTS)
	@case `$(VLC_CONFIG) --linkage deinterlace` in \
	  c++) echo $(CXXLINK) $(libdeinterlace_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin deinterlace\` ; $(CXXLINK) $(libdeinterlace_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin deinterlace` ;; \
	  objc) echo $(OBJCLINK) $(libdeinterlace_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin deinterlace\` ; $(OBJCLINK) $(libdeinterlace_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin deinterlace` ;; \
	  c|*) echo $(LINK) $(libdeinterlace_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin deinterlace\` ; $(LINK) $(libdeinterlace_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin deinterlace` ;; \
	esac


# The blend plugin

if UNTRUE
Lblendp = libblend_plugin.a
Dblendp = libblend_plugin$(LIBEXT)
Lblendb = libblend.a
Lblendpic = libblend_pic.a
endif

libblend_plugin_a_SOURCES = $(SOURCES_blend)
libblend_plugin_a_CFLAGS = `$(VLC_CONFIG) --cflags plugin blend`
libblend_plugin_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags plugin blend`
libblend_plugin_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags plugin blend`

libblend_pic_a_SOURCES = $(SOURCES_blend)
libblend_pic_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin pic blend`
libblend_pic_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin pic blend`
libblend_pic_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin pic blend`

libblend_a_SOURCES = $(SOURCES_blend)
libblend_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin blend`
libblend_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin blend`
libblend_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin blend`

libvlc_LIBRARIES += $(Lblendb) $(Lblendpic)
libblend_DATA = $(Dblendp)

libblenddir = $(libdir)/vlc/
noinst_LIBRARIES += $(Lblendp)
libblend_plugin$(LIBEXT): $(libblend_plugin_a_OBJECTS)
	@case `$(VLC_CONFIG) --linkage blend` in \
	  c++) echo $(CXXLINK) $(libblend_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin blend\` ; $(CXXLINK) $(libblend_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin blend` ;; \
	  objc) echo $(OBJCLINK) $(libblend_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin blend\` ; $(OBJCLINK) $(libblend_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin blend` ;; \
	  c|*) echo $(LINK) $(libblend_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin blend\` ; $(LINK) $(libblend_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin blend` ;; \
	esac


# The scale plugin

if UNTRUE
Lscalep = libscale_plugin.a
Dscalep = libscale_plugin$(LIBEXT)
Lscaleb = libscale.a
Lscalepic = libscale_pic.a
endif

libscale_plugin_a_SOURCES = $(SOURCES_scale)
libscale_plugin_a_CFLAGS = `$(VLC_CONFIG) --cflags plugin scale`
libscale_plugin_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags plugin scale`
libscale_plugin_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags plugin scale`

libscale_pic_a_SOURCES = $(SOURCES_scale)
libscale_pic_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin pic scale`
libscale_pic_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin pic scale`
libscale_pic_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin pic scale`

libscale_a_SOURCES = $(SOURCES_scale)
libscale_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin scale`
libscale_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin scale`
libscale_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin scale`

libvlc_LIBRARIES += $(Lscaleb) $(Lscalepic)
libscale_DATA = $(Dscalep)

libscaledir = $(libdir)/vlc/
noinst_LIBRARIES += $(Lscalep)
libscale_plugin$(LIBEXT): $(libscale_plugin_a_OBJECTS)
	@case `$(VLC_CONFIG) --linkage scale` in \
	  c++) echo $(CXXLINK) $(libscale_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin scale\` ; $(CXXLINK) $(libscale_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin scale` ;; \
	  objc) echo $(OBJCLINK) $(libscale_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin scale\` ; $(OBJCLINK) $(libscale_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin scale` ;; \
	  c|*) echo $(LINK) $(libscale_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin scale\` ; $(LINK) $(libscale_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin scale` ;; \
	esac


# The time plugin

if UNTRUE
Ltimep = libtime_plugin.a
Dtimep = libtime_plugin$(LIBEXT)
Ltimeb = libtime.a
Ltimepic = libtime_pic.a
endif

libtime_plugin_a_SOURCES = $(SOURCES_time)
libtime_plugin_a_CFLAGS = `$(VLC_CONFIG) --cflags plugin time`
libtime_plugin_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags plugin time`
libtime_plugin_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags plugin time`

libtime_pic_a_SOURCES = $(SOURCES_time)
libtime_pic_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin pic time`
libtime_pic_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin pic time`
libtime_pic_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin pic time`

libtime_a_SOURCES = $(SOURCES_time)
libtime_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin time`
libtime_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin time`
libtime_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin time`

libvlc_LIBRARIES += $(Ltimeb) $(Ltimepic)
libtime_DATA = $(Dtimep)

libtimedir = $(libdir)/vlc/
noinst_LIBRARIES += $(Ltimep)
libtime_plugin$(LIBEXT): $(libtime_plugin_a_OBJECTS)
	@case `$(VLC_CONFIG) --linkage time` in \
	  c++) echo $(CXXLINK) $(libtime_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin time\` ; $(CXXLINK) $(libtime_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin time` ;; \
	  objc) echo $(OBJCLINK) $(libtime_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin time\` ; $(OBJCLINK) $(libtime_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin time` ;; \
	  c|*) echo $(LINK) $(libtime_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin time\` ; $(LINK) $(libtime_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin time` ;; \
	esac


# The marq plugin

if UNTRUE
Lmarqp = libmarq_plugin.a
Dmarqp = libmarq_plugin$(LIBEXT)
Lmarqb = libmarq.a
Lmarqpic = libmarq_pic.a
endif

libmarq_plugin_a_SOURCES = $(SOURCES_marq)
libmarq_plugin_a_CFLAGS = `$(VLC_CONFIG) --cflags plugin marq`
libmarq_plugin_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags plugin marq`
libmarq_plugin_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags plugin marq`

libmarq_pic_a_SOURCES = $(SOURCES_marq)
libmarq_pic_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin pic marq`
libmarq_pic_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin pic marq`
libmarq_pic_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin pic marq`

libmarq_a_SOURCES = $(SOURCES_marq)
libmarq_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin marq`
libmarq_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin marq`
libmarq_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin marq`

libvlc_LIBRARIES += $(Lmarqb) $(Lmarqpic)
libmarq_DATA = $(Dmarqp)

libmarqdir = $(libdir)/vlc/
noinst_LIBRARIES += $(Lmarqp)
libmarq_plugin$(LIBEXT): $(libmarq_plugin_a_OBJECTS)
	@case `$(VLC_CONFIG) --linkage marq` in \
	  c++) echo $(CXXLINK) $(libmarq_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin marq\` ; $(CXXLINK) $(libmarq_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin marq` ;; \
	  objc) echo $(OBJCLINK) $(libmarq_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin marq\` ; $(OBJCLINK) $(libmarq_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin marq` ;; \
	  c|*) echo $(LINK) $(libmarq_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin marq\` ; $(LINK) $(libmarq_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin marq` ;; \
	esac


