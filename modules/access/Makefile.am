
# Autogenerated by bootstrap - DO NOT EDIT - edit Modules.am instead

NULL =
libvlc_LIBRARIES =
noinst_LIBRARIES =
noinst_HEADERS =
EXTRA_DIST = Modules.am
BUILT_SOURCES =
SUBDIRS = dshow dvb mms pvr satellite v4l cdda vcd vcdx screen
#DIST_SUBDIRS = $(SUBDIRS)
libvlcdir = $(libdir)/vlc/access
include Modules.am

if BUILD_MOZILLA
if HAVE_WIN32
# There's no need for pic code on win32 so get rid of this to substantially
# reduce the compilation time.
pic = no
endif
else
pic = no
endif

clean-local:
	-rm -f *.a *.so *.dll *.sl *.dylib

all: all-modules
all-modules:
	@set fnord $$MAKEFLAGS; amf=$$2; targets=`\
	if test "$(plugin)" != "no"; then z=$$($(VLC_CONFIG) --target plugin); for mod in access_file access_directory access_udp access_tcp access_http access_ftp dvdnav dvdread slp cdda; do case "$$z" in */lib$${mod}_plugin*) echo lib$${mod}_plugin$(LIBEXT);; esac; done; fi; \
	if test "$(builtin)" != "no"; then z=$$($(VLC_CONFIG) --target builtin); for mod in access_file access_directory access_udp access_tcp access_http access_ftp dvdnav dvdread slp cdda; do case "$$z" in */lib$${mod}.a*) echo lib$${mod}.a;; esac; done; fi; \
	if test "$(pic)" != "no"; then z=$$($(VLC_CONFIG) --target builtin pic); for mod in access_file access_directory access_udp access_tcp access_http access_ftp dvdnav dvdread slp cdda; do case "$$z" in */lib$${mod}_pic.a*) echo lib$${mod}_pic.a;; esac; done; fi; \
	`; case "$$targets" in *lib*) $(MAKE) $(AM_MAKEFLAGS) $$targets || case "$$amf" in *=*) exit 1;; *k*) fail=yes;; *) exit 1;; esac; ;; esac; \
	test -z "$$fail"

# The access_file plugin

if UNTRUE
Laccess_filep = libaccess_file_plugin.a
Daccess_filep = libaccess_file_plugin$(LIBEXT)
Laccess_fileb = libaccess_file.a
Laccess_filepic = libaccess_file_pic.a
endif

libaccess_file_plugin_a_SOURCES = $(SOURCES_access_file)
libaccess_file_plugin_a_CFLAGS = `$(VLC_CONFIG) --cflags plugin access_file`
libaccess_file_plugin_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags plugin access_file`
libaccess_file_plugin_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags plugin access_file`

libaccess_file_pic_a_SOURCES = $(SOURCES_access_file)
libaccess_file_pic_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin pic access_file`
libaccess_file_pic_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin pic access_file`
libaccess_file_pic_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin pic access_file`

libaccess_file_a_SOURCES = $(SOURCES_access_file)
libaccess_file_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin access_file`
libaccess_file_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin access_file`
libaccess_file_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin access_file`

libvlc_LIBRARIES += $(Laccess_fileb) $(Laccess_filepic)
libaccess_file_DATA = $(Daccess_filep)

libaccess_filedir = $(libdir)/vlc/
noinst_LIBRARIES += $(Laccess_filep)
libaccess_file_plugin$(LIBEXT): $(libaccess_file_plugin_a_OBJECTS)
	@case `$(VLC_CONFIG) --linkage access_file` in \
	  c++) echo $(CXXLINK) $(libaccess_file_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin access_file\` ; $(CXXLINK) $(libaccess_file_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin access_file` ;; \
	  objc) echo $(OBJCLINK) $(libaccess_file_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin access_file\` ; $(OBJCLINK) $(libaccess_file_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin access_file` ;; \
	  c|*) echo $(LINK) $(libaccess_file_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin access_file\` ; $(LINK) $(libaccess_file_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin access_file` ;; \
	esac


# The access_directory plugin

if UNTRUE
Laccess_directoryp = libaccess_directory_plugin.a
Daccess_directoryp = libaccess_directory_plugin$(LIBEXT)
Laccess_directoryb = libaccess_directory.a
Laccess_directorypic = libaccess_directory_pic.a
endif

libaccess_directory_plugin_a_SOURCES = $(SOURCES_access_directory)
libaccess_directory_plugin_a_CFLAGS = `$(VLC_CONFIG) --cflags plugin access_directory`
libaccess_directory_plugin_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags plugin access_directory`
libaccess_directory_plugin_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags plugin access_directory`

libaccess_directory_pic_a_SOURCES = $(SOURCES_access_directory)
libaccess_directory_pic_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin pic access_directory`
libaccess_directory_pic_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin pic access_directory`
libaccess_directory_pic_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin pic access_directory`

libaccess_directory_a_SOURCES = $(SOURCES_access_directory)
libaccess_directory_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin access_directory`
libaccess_directory_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin access_directory`
libaccess_directory_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin access_directory`

libvlc_LIBRARIES += $(Laccess_directoryb) $(Laccess_directorypic)
libaccess_directory_DATA = $(Daccess_directoryp)

libaccess_directorydir = $(libdir)/vlc/
noinst_LIBRARIES += $(Laccess_directoryp)
libaccess_directory_plugin$(LIBEXT): $(libaccess_directory_plugin_a_OBJECTS)
	@case `$(VLC_CONFIG) --linkage access_directory` in \
	  c++) echo $(CXXLINK) $(libaccess_directory_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin access_directory\` ; $(CXXLINK) $(libaccess_directory_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin access_directory` ;; \
	  objc) echo $(OBJCLINK) $(libaccess_directory_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin access_directory\` ; $(OBJCLINK) $(libaccess_directory_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin access_directory` ;; \
	  c|*) echo $(LINK) $(libaccess_directory_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin access_directory\` ; $(LINK) $(libaccess_directory_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin access_directory` ;; \
	esac


# The access_udp plugin

if UNTRUE
Laccess_udpp = libaccess_udp_plugin.a
Daccess_udpp = libaccess_udp_plugin$(LIBEXT)
Laccess_udpb = libaccess_udp.a
Laccess_udppic = libaccess_udp_pic.a
endif

libaccess_udp_plugin_a_SOURCES = $(SOURCES_access_udp)
libaccess_udp_plugin_a_CFLAGS = `$(VLC_CONFIG) --cflags plugin access_udp`
libaccess_udp_plugin_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags plugin access_udp`
libaccess_udp_plugin_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags plugin access_udp`

libaccess_udp_pic_a_SOURCES = $(SOURCES_access_udp)
libaccess_udp_pic_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin pic access_udp`
libaccess_udp_pic_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin pic access_udp`
libaccess_udp_pic_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin pic access_udp`

libaccess_udp_a_SOURCES = $(SOURCES_access_udp)
libaccess_udp_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin access_udp`
libaccess_udp_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin access_udp`
libaccess_udp_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin access_udp`

libvlc_LIBRARIES += $(Laccess_udpb) $(Laccess_udppic)
libaccess_udp_DATA = $(Daccess_udpp)

libaccess_udpdir = $(libdir)/vlc/
noinst_LIBRARIES += $(Laccess_udpp)
libaccess_udp_plugin$(LIBEXT): $(libaccess_udp_plugin_a_OBJECTS)
	@case `$(VLC_CONFIG) --linkage access_udp` in \
	  c++) echo $(CXXLINK) $(libaccess_udp_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin access_udp\` ; $(CXXLINK) $(libaccess_udp_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin access_udp` ;; \
	  objc) echo $(OBJCLINK) $(libaccess_udp_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin access_udp\` ; $(OBJCLINK) $(libaccess_udp_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin access_udp` ;; \
	  c|*) echo $(LINK) $(libaccess_udp_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin access_udp\` ; $(LINK) $(libaccess_udp_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin access_udp` ;; \
	esac


# The access_tcp plugin

if UNTRUE
Laccess_tcpp = libaccess_tcp_plugin.a
Daccess_tcpp = libaccess_tcp_plugin$(LIBEXT)
Laccess_tcpb = libaccess_tcp.a
Laccess_tcppic = libaccess_tcp_pic.a
endif

libaccess_tcp_plugin_a_SOURCES = $(SOURCES_access_tcp)
libaccess_tcp_plugin_a_CFLAGS = `$(VLC_CONFIG) --cflags plugin access_tcp`
libaccess_tcp_plugin_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags plugin access_tcp`
libaccess_tcp_plugin_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags plugin access_tcp`

libaccess_tcp_pic_a_SOURCES = $(SOURCES_access_tcp)
libaccess_tcp_pic_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin pic access_tcp`
libaccess_tcp_pic_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin pic access_tcp`
libaccess_tcp_pic_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin pic access_tcp`

libaccess_tcp_a_SOURCES = $(SOURCES_access_tcp)
libaccess_tcp_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin access_tcp`
libaccess_tcp_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin access_tcp`
libaccess_tcp_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin access_tcp`

libvlc_LIBRARIES += $(Laccess_tcpb) $(Laccess_tcppic)
libaccess_tcp_DATA = $(Daccess_tcpp)

libaccess_tcpdir = $(libdir)/vlc/
noinst_LIBRARIES += $(Laccess_tcpp)
libaccess_tcp_plugin$(LIBEXT): $(libaccess_tcp_plugin_a_OBJECTS)
	@case `$(VLC_CONFIG) --linkage access_tcp` in \
	  c++) echo $(CXXLINK) $(libaccess_tcp_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin access_tcp\` ; $(CXXLINK) $(libaccess_tcp_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin access_tcp` ;; \
	  objc) echo $(OBJCLINK) $(libaccess_tcp_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin access_tcp\` ; $(OBJCLINK) $(libaccess_tcp_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin access_tcp` ;; \
	  c|*) echo $(LINK) $(libaccess_tcp_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin access_tcp\` ; $(LINK) $(libaccess_tcp_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin access_tcp` ;; \
	esac


# The access_http plugin

if UNTRUE
Laccess_httpp = libaccess_http_plugin.a
Daccess_httpp = libaccess_http_plugin$(LIBEXT)
Laccess_httpb = libaccess_http.a
Laccess_httppic = libaccess_http_pic.a
endif

libaccess_http_plugin_a_SOURCES = $(SOURCES_access_http)
libaccess_http_plugin_a_CFLAGS = `$(VLC_CONFIG) --cflags plugin access_http`
libaccess_http_plugin_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags plugin access_http`
libaccess_http_plugin_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags plugin access_http`

libaccess_http_pic_a_SOURCES = $(SOURCES_access_http)
libaccess_http_pic_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin pic access_http`
libaccess_http_pic_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin pic access_http`
libaccess_http_pic_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin pic access_http`

libaccess_http_a_SOURCES = $(SOURCES_access_http)
libaccess_http_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin access_http`
libaccess_http_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin access_http`
libaccess_http_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin access_http`

libvlc_LIBRARIES += $(Laccess_httpb) $(Laccess_httppic)
libaccess_http_DATA = $(Daccess_httpp)

libaccess_httpdir = $(libdir)/vlc/
noinst_LIBRARIES += $(Laccess_httpp)
libaccess_http_plugin$(LIBEXT): $(libaccess_http_plugin_a_OBJECTS)
	@case `$(VLC_CONFIG) --linkage access_http` in \
	  c++) echo $(CXXLINK) $(libaccess_http_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin access_http\` ; $(CXXLINK) $(libaccess_http_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin access_http` ;; \
	  objc) echo $(OBJCLINK) $(libaccess_http_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin access_http\` ; $(OBJCLINK) $(libaccess_http_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin access_http` ;; \
	  c|*) echo $(LINK) $(libaccess_http_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin access_http\` ; $(LINK) $(libaccess_http_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin access_http` ;; \
	esac


# The access_ftp plugin

if UNTRUE
Laccess_ftpp = libaccess_ftp_plugin.a
Daccess_ftpp = libaccess_ftp_plugin$(LIBEXT)
Laccess_ftpb = libaccess_ftp.a
Laccess_ftppic = libaccess_ftp_pic.a
endif

libaccess_ftp_plugin_a_SOURCES = $(SOURCES_access_ftp)
libaccess_ftp_plugin_a_CFLAGS = `$(VLC_CONFIG) --cflags plugin access_ftp`
libaccess_ftp_plugin_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags plugin access_ftp`
libaccess_ftp_plugin_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags plugin access_ftp`

libaccess_ftp_pic_a_SOURCES = $(SOURCES_access_ftp)
libaccess_ftp_pic_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin pic access_ftp`
libaccess_ftp_pic_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin pic access_ftp`
libaccess_ftp_pic_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin pic access_ftp`

libaccess_ftp_a_SOURCES = $(SOURCES_access_ftp)
libaccess_ftp_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin access_ftp`
libaccess_ftp_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin access_ftp`
libaccess_ftp_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin access_ftp`

libvlc_LIBRARIES += $(Laccess_ftpb) $(Laccess_ftppic)
libaccess_ftp_DATA = $(Daccess_ftpp)

libaccess_ftpdir = $(libdir)/vlc/
noinst_LIBRARIES += $(Laccess_ftpp)
libaccess_ftp_plugin$(LIBEXT): $(libaccess_ftp_plugin_a_OBJECTS)
	@case `$(VLC_CONFIG) --linkage access_ftp` in \
	  c++) echo $(CXXLINK) $(libaccess_ftp_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin access_ftp\` ; $(CXXLINK) $(libaccess_ftp_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin access_ftp` ;; \
	  objc) echo $(OBJCLINK) $(libaccess_ftp_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin access_ftp\` ; $(OBJCLINK) $(libaccess_ftp_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin access_ftp` ;; \
	  c|*) echo $(LINK) $(libaccess_ftp_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin access_ftp\` ; $(LINK) $(libaccess_ftp_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin access_ftp` ;; \
	esac


# The dvdnav plugin

if UNTRUE
Ldvdnavp = libdvdnav_plugin.a
Ddvdnavp = libdvdnav_plugin$(LIBEXT)
Ldvdnavb = libdvdnav.a
Ldvdnavpic = libdvdnav_pic.a
endif

libdvdnav_plugin_a_SOURCES = $(SOURCES_dvdnav)
libdvdnav_plugin_a_CFLAGS = `$(VLC_CONFIG) --cflags plugin dvdnav`
libdvdnav_plugin_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags plugin dvdnav`
libdvdnav_plugin_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags plugin dvdnav`

libdvdnav_pic_a_SOURCES = $(SOURCES_dvdnav)
libdvdnav_pic_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin pic dvdnav`
libdvdnav_pic_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin pic dvdnav`
libdvdnav_pic_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin pic dvdnav`

libdvdnav_a_SOURCES = $(SOURCES_dvdnav)
libdvdnav_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin dvdnav`
libdvdnav_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin dvdnav`
libdvdnav_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin dvdnav`

libvlc_LIBRARIES += $(Ldvdnavb) $(Ldvdnavpic)
libdvdnav_DATA = $(Ddvdnavp)

libdvdnavdir = $(libdir)/vlc/
noinst_LIBRARIES += $(Ldvdnavp)
libdvdnav_plugin$(LIBEXT): $(libdvdnav_plugin_a_OBJECTS)
	@case `$(VLC_CONFIG) --linkage dvdnav` in \
	  c++) echo $(CXXLINK) $(libdvdnav_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin dvdnav\` ; $(CXXLINK) $(libdvdnav_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin dvdnav` ;; \
	  objc) echo $(OBJCLINK) $(libdvdnav_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin dvdnav\` ; $(OBJCLINK) $(libdvdnav_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin dvdnav` ;; \
	  c|*) echo $(LINK) $(libdvdnav_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin dvdnav\` ; $(LINK) $(libdvdnav_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin dvdnav` ;; \
	esac


# The dvdread plugin

if UNTRUE
Ldvdreadp = libdvdread_plugin.a
Ddvdreadp = libdvdread_plugin$(LIBEXT)
Ldvdreadb = libdvdread.a
Ldvdreadpic = libdvdread_pic.a
endif

libdvdread_plugin_a_SOURCES = $(SOURCES_dvdread)
libdvdread_plugin_a_CFLAGS = `$(VLC_CONFIG) --cflags plugin dvdread`
libdvdread_plugin_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags plugin dvdread`
libdvdread_plugin_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags plugin dvdread`

libdvdread_pic_a_SOURCES = $(SOURCES_dvdread)
libdvdread_pic_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin pic dvdread`
libdvdread_pic_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin pic dvdread`
libdvdread_pic_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin pic dvdread`

libdvdread_a_SOURCES = $(SOURCES_dvdread)
libdvdread_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin dvdread`
libdvdread_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin dvdread`
libdvdread_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin dvdread`

libvlc_LIBRARIES += $(Ldvdreadb) $(Ldvdreadpic)
libdvdread_DATA = $(Ddvdreadp)

libdvdreaddir = $(libdir)/vlc/
noinst_LIBRARIES += $(Ldvdreadp)
libdvdread_plugin$(LIBEXT): $(libdvdread_plugin_a_OBJECTS)
	@case `$(VLC_CONFIG) --linkage dvdread` in \
	  c++) echo $(CXXLINK) $(libdvdread_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin dvdread\` ; $(CXXLINK) $(libdvdread_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin dvdread` ;; \
	  objc) echo $(OBJCLINK) $(libdvdread_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin dvdread\` ; $(OBJCLINK) $(libdvdread_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin dvdread` ;; \
	  c|*) echo $(LINK) $(libdvdread_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin dvdread\` ; $(LINK) $(libdvdread_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin dvdread` ;; \
	esac


# The slp plugin

if UNTRUE
Lslpp = libslp_plugin.a
Dslpp = libslp_plugin$(LIBEXT)
Lslpb = libslp.a
Lslppic = libslp_pic.a
endif

libslp_plugin_a_SOURCES = $(SOURCES_slp)
libslp_plugin_a_CFLAGS = `$(VLC_CONFIG) --cflags plugin slp`
libslp_plugin_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags plugin slp`
libslp_plugin_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags plugin slp`

libslp_pic_a_SOURCES = $(SOURCES_slp)
libslp_pic_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin pic slp`
libslp_pic_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin pic slp`
libslp_pic_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin pic slp`

libslp_a_SOURCES = $(SOURCES_slp)
libslp_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin slp`
libslp_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin slp`
libslp_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin slp`

libvlc_LIBRARIES += $(Lslpb) $(Lslppic)
libslp_DATA = $(Dslpp)

libslpdir = $(libdir)/vlc/
noinst_LIBRARIES += $(Lslpp)
libslp_plugin$(LIBEXT): $(libslp_plugin_a_OBJECTS)
	@case `$(VLC_CONFIG) --linkage slp` in \
	  c++) echo $(CXXLINK) $(libslp_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin slp\` ; $(CXXLINK) $(libslp_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin slp` ;; \
	  objc) echo $(OBJCLINK) $(libslp_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin slp\` ; $(OBJCLINK) $(libslp_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin slp` ;; \
	  c|*) echo $(LINK) $(libslp_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin slp\` ; $(LINK) $(libslp_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin slp` ;; \
	esac


# The cdda plugin

if UNTRUE
Lcddap = libcdda_plugin.a
Dcddap = libcdda_plugin$(LIBEXT)
Lcddab = libcdda.a
Lcddapic = libcdda_pic.a
endif

libcdda_plugin_a_SOURCES = $(SOURCES_cdda)
libcdda_plugin_a_CFLAGS = `$(VLC_CONFIG) --cflags plugin cdda`
libcdda_plugin_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags plugin cdda`
libcdda_plugin_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags plugin cdda`

libcdda_pic_a_SOURCES = $(SOURCES_cdda)
libcdda_pic_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin pic cdda`
libcdda_pic_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin pic cdda`
libcdda_pic_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin pic cdda`

libcdda_a_SOURCES = $(SOURCES_cdda)
libcdda_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin cdda`
libcdda_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin cdda`
libcdda_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin cdda`

libvlc_LIBRARIES += $(Lcddab) $(Lcddapic)
libcdda_DATA = $(Dcddap)

libcddadir = $(libdir)/vlc/
noinst_LIBRARIES += $(Lcddap)
libcdda_plugin$(LIBEXT): $(libcdda_plugin_a_OBJECTS)
	@case `$(VLC_CONFIG) --linkage cdda` in \
	  c++) echo $(CXXLINK) $(libcdda_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin cdda\` ; $(CXXLINK) $(libcdda_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin cdda` ;; \
	  objc) echo $(OBJCLINK) $(libcdda_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin cdda\` ; $(OBJCLINK) $(libcdda_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin cdda` ;; \
	  c|*) echo $(LINK) $(libcdda_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin cdda\` ; $(LINK) $(libcdda_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin cdda` ;; \
	esac


