
# Autogenerated by bootstrap - DO NOT EDIT - edit Modules.am instead

NULL =
libvlc_LIBRARIES =
noinst_LIBRARIES =
noinst_HEADERS =
EXTRA_DIST = Modules.am
BUILT_SOURCES =
SUBDIRS = 
#DIST_SUBDIRS = $(SUBDIRS)
libvlcdir = $(libdir)/vlc/demux
include Modules.am

if BUILD_MOZILLA
if HAVE_WIN32
# There's no need for pic code on win32 so get rid of this to substantially
# reduce the compilation time.
pic = no
endif
else
pic = no
endif

clean-local:
	-rm -f *.a *.so *.dll *.sl *.dylib

all: all-modules
all-modules:
	@set fnord $$MAKEFLAGS; amf=$$2; targets=`\
	if test "$(plugin)" != "no"; then z=$$($(VLC_CONFIG) --target plugin); for mod in m4a m4v mpga mpgv h264; do case "$$z" in */lib$${mod}_plugin*) echo lib$${mod}_plugin$(LIBEXT);; esac; done; fi; \
	if test "$(builtin)" != "no"; then z=$$($(VLC_CONFIG) --target builtin); for mod in m4a m4v mpga mpgv h264; do case "$$z" in */lib$${mod}.a*) echo lib$${mod}.a;; esac; done; fi; \
	if test "$(pic)" != "no"; then z=$$($(VLC_CONFIG) --target builtin pic); for mod in m4a m4v mpga mpgv h264; do case "$$z" in */lib$${mod}_pic.a*) echo lib$${mod}_pic.a;; esac; done; fi; \
	`; case "$$targets" in *lib*) $(MAKE) $(AM_MAKEFLAGS) $$targets || case "$$amf" in *=*) exit 1;; *k*) fail=yes;; *) exit 1;; esac; ;; esac; \
	test -z "$$fail"

# The m4a plugin

if UNTRUE
Lm4ap = libm4a_plugin.a
Dm4ap = libm4a_plugin$(LIBEXT)
Lm4ab = libm4a.a
Lm4apic = libm4a_pic.a
endif

libm4a_plugin_a_SOURCES = $(SOURCES_m4a)
libm4a_plugin_a_CFLAGS = `$(VLC_CONFIG) --cflags plugin m4a`
libm4a_plugin_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags plugin m4a`
libm4a_plugin_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags plugin m4a`

libm4a_pic_a_SOURCES = $(SOURCES_m4a)
libm4a_pic_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin pic m4a`
libm4a_pic_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin pic m4a`
libm4a_pic_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin pic m4a`

libm4a_a_SOURCES = $(SOURCES_m4a)
libm4a_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin m4a`
libm4a_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin m4a`
libm4a_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin m4a`

libvlc_LIBRARIES += $(Lm4ab) $(Lm4apic)
libm4a_DATA = $(Dm4ap)

libm4adir = $(libdir)/vlc/
noinst_LIBRARIES += $(Lm4ap)
libm4a_plugin$(LIBEXT): $(libm4a_plugin_a_OBJECTS)
	@case `$(VLC_CONFIG) --linkage m4a` in \
	  c++) echo $(CXXLINK) $(libm4a_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin m4a\` ; $(CXXLINK) $(libm4a_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin m4a` ;; \
	  objc) echo $(OBJCLINK) $(libm4a_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin m4a\` ; $(OBJCLINK) $(libm4a_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin m4a` ;; \
	  c|*) echo $(LINK) $(libm4a_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin m4a\` ; $(LINK) $(libm4a_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin m4a` ;; \
	esac


# The m4v plugin

if UNTRUE
Lm4vp = libm4v_plugin.a
Dm4vp = libm4v_plugin$(LIBEXT)
Lm4vb = libm4v.a
Lm4vpic = libm4v_pic.a
endif

libm4v_plugin_a_SOURCES = $(SOURCES_m4v)
libm4v_plugin_a_CFLAGS = `$(VLC_CONFIG) --cflags plugin m4v`
libm4v_plugin_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags plugin m4v`
libm4v_plugin_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags plugin m4v`

libm4v_pic_a_SOURCES = $(SOURCES_m4v)
libm4v_pic_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin pic m4v`
libm4v_pic_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin pic m4v`
libm4v_pic_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin pic m4v`

libm4v_a_SOURCES = $(SOURCES_m4v)
libm4v_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin m4v`
libm4v_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin m4v`
libm4v_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin m4v`

libvlc_LIBRARIES += $(Lm4vb) $(Lm4vpic)
libm4v_DATA = $(Dm4vp)

libm4vdir = $(libdir)/vlc/
noinst_LIBRARIES += $(Lm4vp)
libm4v_plugin$(LIBEXT): $(libm4v_plugin_a_OBJECTS)
	@case `$(VLC_CONFIG) --linkage m4v` in \
	  c++) echo $(CXXLINK) $(libm4v_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin m4v\` ; $(CXXLINK) $(libm4v_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin m4v` ;; \
	  objc) echo $(OBJCLINK) $(libm4v_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin m4v\` ; $(OBJCLINK) $(libm4v_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin m4v` ;; \
	  c|*) echo $(LINK) $(libm4v_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin m4v\` ; $(LINK) $(libm4v_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin m4v` ;; \
	esac


# The mpga plugin

if UNTRUE
Lmpgap = libmpga_plugin.a
Dmpgap = libmpga_plugin$(LIBEXT)
Lmpgab = libmpga.a
Lmpgapic = libmpga_pic.a
endif

libmpga_plugin_a_SOURCES = $(SOURCES_mpga)
libmpga_plugin_a_CFLAGS = `$(VLC_CONFIG) --cflags plugin mpga`
libmpga_plugin_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags plugin mpga`
libmpga_plugin_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags plugin mpga`

libmpga_pic_a_SOURCES = $(SOURCES_mpga)
libmpga_pic_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin pic mpga`
libmpga_pic_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin pic mpga`
libmpga_pic_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin pic mpga`

libmpga_a_SOURCES = $(SOURCES_mpga)
libmpga_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin mpga`
libmpga_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin mpga`
libmpga_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin mpga`

libvlc_LIBRARIES += $(Lmpgab) $(Lmpgapic)
libmpga_DATA = $(Dmpgap)

libmpgadir = $(libdir)/vlc/
noinst_LIBRARIES += $(Lmpgap)
libmpga_plugin$(LIBEXT): $(libmpga_plugin_a_OBJECTS)
	@case `$(VLC_CONFIG) --linkage mpga` in \
	  c++) echo $(CXXLINK) $(libmpga_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin mpga\` ; $(CXXLINK) $(libmpga_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin mpga` ;; \
	  objc) echo $(OBJCLINK) $(libmpga_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin mpga\` ; $(OBJCLINK) $(libmpga_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin mpga` ;; \
	  c|*) echo $(LINK) $(libmpga_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin mpga\` ; $(LINK) $(libmpga_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin mpga` ;; \
	esac


# The mpgv plugin

if UNTRUE
Lmpgvp = libmpgv_plugin.a
Dmpgvp = libmpgv_plugin$(LIBEXT)
Lmpgvb = libmpgv.a
Lmpgvpic = libmpgv_pic.a
endif

libmpgv_plugin_a_SOURCES = $(SOURCES_mpgv)
libmpgv_plugin_a_CFLAGS = `$(VLC_CONFIG) --cflags plugin mpgv`
libmpgv_plugin_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags plugin mpgv`
libmpgv_plugin_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags plugin mpgv`

libmpgv_pic_a_SOURCES = $(SOURCES_mpgv)
libmpgv_pic_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin pic mpgv`
libmpgv_pic_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin pic mpgv`
libmpgv_pic_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin pic mpgv`

libmpgv_a_SOURCES = $(SOURCES_mpgv)
libmpgv_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin mpgv`
libmpgv_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin mpgv`
libmpgv_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin mpgv`

libvlc_LIBRARIES += $(Lmpgvb) $(Lmpgvpic)
libmpgv_DATA = $(Dmpgvp)

libmpgvdir = $(libdir)/vlc/
noinst_LIBRARIES += $(Lmpgvp)
libmpgv_plugin$(LIBEXT): $(libmpgv_plugin_a_OBJECTS)
	@case `$(VLC_CONFIG) --linkage mpgv` in \
	  c++) echo $(CXXLINK) $(libmpgv_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin mpgv\` ; $(CXXLINK) $(libmpgv_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin mpgv` ;; \
	  objc) echo $(OBJCLINK) $(libmpgv_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin mpgv\` ; $(OBJCLINK) $(libmpgv_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin mpgv` ;; \
	  c|*) echo $(LINK) $(libmpgv_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin mpgv\` ; $(LINK) $(libmpgv_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin mpgv` ;; \
	esac


# The h264 plugin

if UNTRUE
Lh264p = libh264_plugin.a
Dh264p = libh264_plugin$(LIBEXT)
Lh264b = libh264.a
Lh264pic = libh264_pic.a
endif

libh264_plugin_a_SOURCES = $(SOURCES_h264)
libh264_plugin_a_CFLAGS = `$(VLC_CONFIG) --cflags plugin h264`
libh264_plugin_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags plugin h264`
libh264_plugin_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags plugin h264`

libh264_pic_a_SOURCES = $(SOURCES_h264)
libh264_pic_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin pic h264`
libh264_pic_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin pic h264`
libh264_pic_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin pic h264`

libh264_a_SOURCES = $(SOURCES_h264)
libh264_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin h264`
libh264_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin h264`
libh264_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin h264`

libvlc_LIBRARIES += $(Lh264b) $(Lh264pic)
libh264_DATA = $(Dh264p)

libh264dir = $(libdir)/vlc/
noinst_LIBRARIES += $(Lh264p)
libh264_plugin$(LIBEXT): $(libh264_plugin_a_OBJECTS)
	@case `$(VLC_CONFIG) --linkage h264` in \
	  c++) echo $(CXXLINK) $(libh264_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin h264\` ; $(CXXLINK) $(libh264_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin h264` ;; \
	  objc) echo $(OBJCLINK) $(libh264_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin h264\` ; $(OBJCLINK) $(libh264_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin h264` ;; \
	  c|*) echo $(LINK) $(libh264_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin h264\` ; $(LINK) $(libh264_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin h264` ;; \
	esac


