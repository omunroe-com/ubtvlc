
# Autogenerated by bootstrap - DO NOT EDIT - edit Modules.am instead

NULL =
libvlc_LIBRARIES =
noinst_LIBRARIES =
noinst_HEADERS =
EXTRA_DIST = Modules.am
BUILT_SOURCES =
SUBDIRS = 
#DIST_SUBDIRS = $(SUBDIRS)
libvlcdir = $(libdir)/vlc/audio_output
include Modules.am

if BUILD_MOZILLA
if HAVE_WIN32
# There's no need for pic code on win32 so get rid of this to substantially
# reduce the compilation time.
pic = no
endif
else
pic = no
endif

clean-local:
	-rm -f *.a *.so *.dll *.sl *.dylib

all: all-modules
all-modules:
	@set fnord $$MAKEFLAGS; amf=$$2; targets=`\
	if test "$(plugin)" != "no"; then z=$$($(VLC_CONFIG) --target plugin); for mod in alsa arts coreaudio aout_directx esd aout_file oss aout_sdl waveout hd1000a portaudio; do case "$$z" in */lib$${mod}_plugin*) echo lib$${mod}_plugin$(LIBEXT);; esac; done; fi; \
	if test "$(builtin)" != "no"; then z=$$($(VLC_CONFIG) --target builtin); for mod in alsa arts coreaudio aout_directx esd aout_file oss aout_sdl waveout hd1000a portaudio; do case "$$z" in */lib$${mod}.a*) echo lib$${mod}.a;; esac; done; fi; \
	if test "$(pic)" != "no"; then z=$$($(VLC_CONFIG) --target builtin pic); for mod in alsa arts coreaudio aout_directx esd aout_file oss aout_sdl waveout hd1000a portaudio; do case "$$z" in */lib$${mod}_pic.a*) echo lib$${mod}_pic.a;; esac; done; fi; \
	`; case "$$targets" in *lib*) $(MAKE) $(AM_MAKEFLAGS) $$targets || case "$$amf" in *=*) exit 1;; *k*) fail=yes;; *) exit 1;; esac; ;; esac; \
	test -z "$$fail"

# The alsa plugin

if UNTRUE
Lalsap = libalsa_plugin.a
Dalsap = libalsa_plugin$(LIBEXT)
Lalsab = libalsa.a
Lalsapic = libalsa_pic.a
endif

libalsa_plugin_a_SOURCES = $(SOURCES_alsa)
libalsa_plugin_a_CFLAGS = `$(VLC_CONFIG) --cflags plugin alsa`
libalsa_plugin_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags plugin alsa`
libalsa_plugin_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags plugin alsa`

libalsa_pic_a_SOURCES = $(SOURCES_alsa)
libalsa_pic_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin pic alsa`
libalsa_pic_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin pic alsa`
libalsa_pic_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin pic alsa`

libalsa_a_SOURCES = $(SOURCES_alsa)
libalsa_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin alsa`
libalsa_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin alsa`
libalsa_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin alsa`

libvlc_LIBRARIES += $(Lalsab) $(Lalsapic)
libalsa_DATA = $(Dalsap)

libalsadir = $(libdir)/vlc/
noinst_LIBRARIES += $(Lalsap)
libalsa_plugin$(LIBEXT): $(libalsa_plugin_a_OBJECTS)
	@case `$(VLC_CONFIG) --linkage alsa` in \
	  c++) echo $(CXXLINK) $(libalsa_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin alsa\` ; $(CXXLINK) $(libalsa_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin alsa` ;; \
	  objc) echo $(OBJCLINK) $(libalsa_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin alsa\` ; $(OBJCLINK) $(libalsa_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin alsa` ;; \
	  c|*) echo $(LINK) $(libalsa_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin alsa\` ; $(LINK) $(libalsa_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin alsa` ;; \
	esac


# The arts plugin

if UNTRUE
Lartsp = libarts_plugin.a
Dartsp = libarts_plugin$(LIBEXT)
Lartsb = libarts.a
Lartspic = libarts_pic.a
endif

libarts_plugin_a_SOURCES = $(SOURCES_arts)
libarts_plugin_a_CFLAGS = `$(VLC_CONFIG) --cflags plugin arts`
libarts_plugin_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags plugin arts`
libarts_plugin_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags plugin arts`

libarts_pic_a_SOURCES = $(SOURCES_arts)
libarts_pic_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin pic arts`
libarts_pic_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin pic arts`
libarts_pic_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin pic arts`

libarts_a_SOURCES = $(SOURCES_arts)
libarts_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin arts`
libarts_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin arts`
libarts_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin arts`

libvlc_LIBRARIES += $(Lartsb) $(Lartspic)
libarts_DATA = $(Dartsp)

libartsdir = $(libdir)/vlc/
noinst_LIBRARIES += $(Lartsp)
libarts_plugin$(LIBEXT): $(libarts_plugin_a_OBJECTS)
	@case `$(VLC_CONFIG) --linkage arts` in \
	  c++) echo $(CXXLINK) $(libarts_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin arts\` ; $(CXXLINK) $(libarts_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin arts` ;; \
	  objc) echo $(OBJCLINK) $(libarts_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin arts\` ; $(OBJCLINK) $(libarts_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin arts` ;; \
	  c|*) echo $(LINK) $(libarts_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin arts\` ; $(LINK) $(libarts_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin arts` ;; \
	esac


# The coreaudio plugin

if UNTRUE
Lcoreaudiop = libcoreaudio_plugin.a
Dcoreaudiop = libcoreaudio_plugin$(LIBEXT)
Lcoreaudiob = libcoreaudio.a
Lcoreaudiopic = libcoreaudio_pic.a
endif

libcoreaudio_plugin_a_SOURCES = $(SOURCES_coreaudio)
libcoreaudio_plugin_a_CFLAGS = `$(VLC_CONFIG) --cflags plugin coreaudio`
libcoreaudio_plugin_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags plugin coreaudio`
libcoreaudio_plugin_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags plugin coreaudio`

libcoreaudio_pic_a_SOURCES = $(SOURCES_coreaudio)
libcoreaudio_pic_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin pic coreaudio`
libcoreaudio_pic_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin pic coreaudio`
libcoreaudio_pic_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin pic coreaudio`

libcoreaudio_a_SOURCES = $(SOURCES_coreaudio)
libcoreaudio_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin coreaudio`
libcoreaudio_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin coreaudio`
libcoreaudio_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin coreaudio`

libvlc_LIBRARIES += $(Lcoreaudiob) $(Lcoreaudiopic)
libcoreaudio_DATA = $(Dcoreaudiop)

libcoreaudiodir = $(libdir)/vlc/
noinst_LIBRARIES += $(Lcoreaudiop)
libcoreaudio_plugin$(LIBEXT): $(libcoreaudio_plugin_a_OBJECTS)
	@case `$(VLC_CONFIG) --linkage coreaudio` in \
	  c++) echo $(CXXLINK) $(libcoreaudio_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin coreaudio\` ; $(CXXLINK) $(libcoreaudio_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin coreaudio` ;; \
	  objc) echo $(OBJCLINK) $(libcoreaudio_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin coreaudio\` ; $(OBJCLINK) $(libcoreaudio_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin coreaudio` ;; \
	  c|*) echo $(LINK) $(libcoreaudio_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin coreaudio\` ; $(LINK) $(libcoreaudio_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin coreaudio` ;; \
	esac


# The aout_directx plugin

if UNTRUE
Laout_directxp = libaout_directx_plugin.a
Daout_directxp = libaout_directx_plugin$(LIBEXT)
Laout_directxb = libaout_directx.a
Laout_directxpic = libaout_directx_pic.a
endif

libaout_directx_plugin_a_SOURCES = $(SOURCES_aout_directx)
libaout_directx_plugin_a_CFLAGS = `$(VLC_CONFIG) --cflags plugin aout_directx`
libaout_directx_plugin_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags plugin aout_directx`
libaout_directx_plugin_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags plugin aout_directx`

libaout_directx_pic_a_SOURCES = $(SOURCES_aout_directx)
libaout_directx_pic_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin pic aout_directx`
libaout_directx_pic_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin pic aout_directx`
libaout_directx_pic_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin pic aout_directx`

libaout_directx_a_SOURCES = $(SOURCES_aout_directx)
libaout_directx_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin aout_directx`
libaout_directx_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin aout_directx`
libaout_directx_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin aout_directx`

libvlc_LIBRARIES += $(Laout_directxb) $(Laout_directxpic)
libaout_directx_DATA = $(Daout_directxp)

libaout_directxdir = $(libdir)/vlc/
noinst_LIBRARIES += $(Laout_directxp)
libaout_directx_plugin$(LIBEXT): $(libaout_directx_plugin_a_OBJECTS)
	@case `$(VLC_CONFIG) --linkage aout_directx` in \
	  c++) echo $(CXXLINK) $(libaout_directx_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin aout_directx\` ; $(CXXLINK) $(libaout_directx_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin aout_directx` ;; \
	  objc) echo $(OBJCLINK) $(libaout_directx_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin aout_directx\` ; $(OBJCLINK) $(libaout_directx_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin aout_directx` ;; \
	  c|*) echo $(LINK) $(libaout_directx_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin aout_directx\` ; $(LINK) $(libaout_directx_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin aout_directx` ;; \
	esac


# The esd plugin

if UNTRUE
Lesdp = libesd_plugin.a
Desdp = libesd_plugin$(LIBEXT)
Lesdb = libesd.a
Lesdpic = libesd_pic.a
endif

libesd_plugin_a_SOURCES = $(SOURCES_esd)
libesd_plugin_a_CFLAGS = `$(VLC_CONFIG) --cflags plugin esd`
libesd_plugin_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags plugin esd`
libesd_plugin_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags plugin esd`

libesd_pic_a_SOURCES = $(SOURCES_esd)
libesd_pic_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin pic esd`
libesd_pic_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin pic esd`
libesd_pic_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin pic esd`

libesd_a_SOURCES = $(SOURCES_esd)
libesd_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin esd`
libesd_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin esd`
libesd_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin esd`

libvlc_LIBRARIES += $(Lesdb) $(Lesdpic)
libesd_DATA = $(Desdp)

libesddir = $(libdir)/vlc/
noinst_LIBRARIES += $(Lesdp)
libesd_plugin$(LIBEXT): $(libesd_plugin_a_OBJECTS)
	@case `$(VLC_CONFIG) --linkage esd` in \
	  c++) echo $(CXXLINK) $(libesd_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin esd\` ; $(CXXLINK) $(libesd_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin esd` ;; \
	  objc) echo $(OBJCLINK) $(libesd_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin esd\` ; $(OBJCLINK) $(libesd_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin esd` ;; \
	  c|*) echo $(LINK) $(libesd_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin esd\` ; $(LINK) $(libesd_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin esd` ;; \
	esac


# The aout_file plugin

if UNTRUE
Laout_filep = libaout_file_plugin.a
Daout_filep = libaout_file_plugin$(LIBEXT)
Laout_fileb = libaout_file.a
Laout_filepic = libaout_file_pic.a
endif

libaout_file_plugin_a_SOURCES = $(SOURCES_aout_file)
libaout_file_plugin_a_CFLAGS = `$(VLC_CONFIG) --cflags plugin aout_file`
libaout_file_plugin_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags plugin aout_file`
libaout_file_plugin_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags plugin aout_file`

libaout_file_pic_a_SOURCES = $(SOURCES_aout_file)
libaout_file_pic_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin pic aout_file`
libaout_file_pic_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin pic aout_file`
libaout_file_pic_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin pic aout_file`

libaout_file_a_SOURCES = $(SOURCES_aout_file)
libaout_file_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin aout_file`
libaout_file_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin aout_file`
libaout_file_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin aout_file`

libvlc_LIBRARIES += $(Laout_fileb) $(Laout_filepic)
libaout_file_DATA = $(Daout_filep)

libaout_filedir = $(libdir)/vlc/
noinst_LIBRARIES += $(Laout_filep)
libaout_file_plugin$(LIBEXT): $(libaout_file_plugin_a_OBJECTS)
	@case `$(VLC_CONFIG) --linkage aout_file` in \
	  c++) echo $(CXXLINK) $(libaout_file_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin aout_file\` ; $(CXXLINK) $(libaout_file_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin aout_file` ;; \
	  objc) echo $(OBJCLINK) $(libaout_file_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin aout_file\` ; $(OBJCLINK) $(libaout_file_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin aout_file` ;; \
	  c|*) echo $(LINK) $(libaout_file_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin aout_file\` ; $(LINK) $(libaout_file_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin aout_file` ;; \
	esac


# The oss plugin

if UNTRUE
Lossp = liboss_plugin.a
Dossp = liboss_plugin$(LIBEXT)
Lossb = liboss.a
Losspic = liboss_pic.a
endif

liboss_plugin_a_SOURCES = $(SOURCES_oss)
liboss_plugin_a_CFLAGS = `$(VLC_CONFIG) --cflags plugin oss`
liboss_plugin_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags plugin oss`
liboss_plugin_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags plugin oss`

liboss_pic_a_SOURCES = $(SOURCES_oss)
liboss_pic_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin pic oss`
liboss_pic_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin pic oss`
liboss_pic_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin pic oss`

liboss_a_SOURCES = $(SOURCES_oss)
liboss_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin oss`
liboss_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin oss`
liboss_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin oss`

libvlc_LIBRARIES += $(Lossb) $(Losspic)
liboss_DATA = $(Dossp)

libossdir = $(libdir)/vlc/
noinst_LIBRARIES += $(Lossp)
liboss_plugin$(LIBEXT): $(liboss_plugin_a_OBJECTS)
	@case `$(VLC_CONFIG) --linkage oss` in \
	  c++) echo $(CXXLINK) $(liboss_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin oss\` ; $(CXXLINK) $(liboss_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin oss` ;; \
	  objc) echo $(OBJCLINK) $(liboss_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin oss\` ; $(OBJCLINK) $(liboss_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin oss` ;; \
	  c|*) echo $(LINK) $(liboss_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin oss\` ; $(LINK) $(liboss_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin oss` ;; \
	esac


# The aout_sdl plugin

if UNTRUE
Laout_sdlp = libaout_sdl_plugin.a
Daout_sdlp = libaout_sdl_plugin$(LIBEXT)
Laout_sdlb = libaout_sdl.a
Laout_sdlpic = libaout_sdl_pic.a
endif

libaout_sdl_plugin_a_SOURCES = $(SOURCES_aout_sdl)
libaout_sdl_plugin_a_CFLAGS = `$(VLC_CONFIG) --cflags plugin aout_sdl`
libaout_sdl_plugin_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags plugin aout_sdl`
libaout_sdl_plugin_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags plugin aout_sdl`

libaout_sdl_pic_a_SOURCES = $(SOURCES_aout_sdl)
libaout_sdl_pic_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin pic aout_sdl`
libaout_sdl_pic_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin pic aout_sdl`
libaout_sdl_pic_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin pic aout_sdl`

libaout_sdl_a_SOURCES = $(SOURCES_aout_sdl)
libaout_sdl_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin aout_sdl`
libaout_sdl_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin aout_sdl`
libaout_sdl_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin aout_sdl`

libvlc_LIBRARIES += $(Laout_sdlb) $(Laout_sdlpic)
libaout_sdl_DATA = $(Daout_sdlp)

libaout_sdldir = $(libdir)/vlc/
noinst_LIBRARIES += $(Laout_sdlp)
libaout_sdl_plugin$(LIBEXT): $(libaout_sdl_plugin_a_OBJECTS)
	@case `$(VLC_CONFIG) --linkage aout_sdl` in \
	  c++) echo $(CXXLINK) $(libaout_sdl_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin aout_sdl\` ; $(CXXLINK) $(libaout_sdl_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin aout_sdl` ;; \
	  objc) echo $(OBJCLINK) $(libaout_sdl_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin aout_sdl\` ; $(OBJCLINK) $(libaout_sdl_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin aout_sdl` ;; \
	  c|*) echo $(LINK) $(libaout_sdl_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin aout_sdl\` ; $(LINK) $(libaout_sdl_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin aout_sdl` ;; \
	esac


# The waveout plugin

if UNTRUE
Lwaveoutp = libwaveout_plugin.a
Dwaveoutp = libwaveout_plugin$(LIBEXT)
Lwaveoutb = libwaveout.a
Lwaveoutpic = libwaveout_pic.a
endif

libwaveout_plugin_a_SOURCES = $(SOURCES_waveout)
libwaveout_plugin_a_CFLAGS = `$(VLC_CONFIG) --cflags plugin waveout`
libwaveout_plugin_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags plugin waveout`
libwaveout_plugin_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags plugin waveout`

libwaveout_pic_a_SOURCES = $(SOURCES_waveout)
libwaveout_pic_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin pic waveout`
libwaveout_pic_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin pic waveout`
libwaveout_pic_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin pic waveout`

libwaveout_a_SOURCES = $(SOURCES_waveout)
libwaveout_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin waveout`
libwaveout_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin waveout`
libwaveout_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin waveout`

libvlc_LIBRARIES += $(Lwaveoutb) $(Lwaveoutpic)
libwaveout_DATA = $(Dwaveoutp)

libwaveoutdir = $(libdir)/vlc/
noinst_LIBRARIES += $(Lwaveoutp)
libwaveout_plugin$(LIBEXT): $(libwaveout_plugin_a_OBJECTS)
	@case `$(VLC_CONFIG) --linkage waveout` in \
	  c++) echo $(CXXLINK) $(libwaveout_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin waveout\` ; $(CXXLINK) $(libwaveout_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin waveout` ;; \
	  objc) echo $(OBJCLINK) $(libwaveout_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin waveout\` ; $(OBJCLINK) $(libwaveout_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin waveout` ;; \
	  c|*) echo $(LINK) $(libwaveout_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin waveout\` ; $(LINK) $(libwaveout_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin waveout` ;; \
	esac


# The hd1000a plugin

if UNTRUE
Lhd1000ap = libhd1000a_plugin.a
Dhd1000ap = libhd1000a_plugin$(LIBEXT)
Lhd1000ab = libhd1000a.a
Lhd1000apic = libhd1000a_pic.a
endif

libhd1000a_plugin_a_SOURCES = $(SOURCES_hd1000a)
libhd1000a_plugin_a_CFLAGS = `$(VLC_CONFIG) --cflags plugin hd1000a`
libhd1000a_plugin_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags plugin hd1000a`
libhd1000a_plugin_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags plugin hd1000a`

libhd1000a_pic_a_SOURCES = $(SOURCES_hd1000a)
libhd1000a_pic_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin pic hd1000a`
libhd1000a_pic_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin pic hd1000a`
libhd1000a_pic_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin pic hd1000a`

libhd1000a_a_SOURCES = $(SOURCES_hd1000a)
libhd1000a_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin hd1000a`
libhd1000a_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin hd1000a`
libhd1000a_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin hd1000a`

libvlc_LIBRARIES += $(Lhd1000ab) $(Lhd1000apic)
libhd1000a_DATA = $(Dhd1000ap)

libhd1000adir = $(libdir)/vlc/
noinst_LIBRARIES += $(Lhd1000ap)
libhd1000a_plugin$(LIBEXT): $(libhd1000a_plugin_a_OBJECTS)
	@case `$(VLC_CONFIG) --linkage hd1000a` in \
	  c++) echo $(CXXLINK) $(libhd1000a_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin hd1000a\` ; $(CXXLINK) $(libhd1000a_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin hd1000a` ;; \
	  objc) echo $(OBJCLINK) $(libhd1000a_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin hd1000a\` ; $(OBJCLINK) $(libhd1000a_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin hd1000a` ;; \
	  c|*) echo $(LINK) $(libhd1000a_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin hd1000a\` ; $(LINK) $(libhd1000a_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin hd1000a` ;; \
	esac


# The portaudio plugin

if UNTRUE
Lportaudiop = libportaudio_plugin.a
Dportaudiop = libportaudio_plugin$(LIBEXT)
Lportaudiob = libportaudio.a
Lportaudiopic = libportaudio_pic.a
endif

libportaudio_plugin_a_SOURCES = $(SOURCES_portaudio)
libportaudio_plugin_a_CFLAGS = `$(VLC_CONFIG) --cflags plugin portaudio`
libportaudio_plugin_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags plugin portaudio`
libportaudio_plugin_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags plugin portaudio`

libportaudio_pic_a_SOURCES = $(SOURCES_portaudio)
libportaudio_pic_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin pic portaudio`
libportaudio_pic_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin pic portaudio`
libportaudio_pic_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin pic portaudio`

libportaudio_a_SOURCES = $(SOURCES_portaudio)
libportaudio_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin portaudio`
libportaudio_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin portaudio`
libportaudio_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin portaudio`

libvlc_LIBRARIES += $(Lportaudiob) $(Lportaudiopic)
libportaudio_DATA = $(Dportaudiop)

libportaudiodir = $(libdir)/vlc/
noinst_LIBRARIES += $(Lportaudiop)
libportaudio_plugin$(LIBEXT): $(libportaudio_plugin_a_OBJECTS)
	@case `$(VLC_CONFIG) --linkage portaudio` in \
	  c++) echo $(CXXLINK) $(libportaudio_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin portaudio\` ; $(CXXLINK) $(libportaudio_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin portaudio` ;; \
	  objc) echo $(OBJCLINK) $(libportaudio_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin portaudio\` ; $(OBJCLINK) $(libportaudio_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin portaudio` ;; \
	  c|*) echo $(LINK) $(libportaudio_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin portaudio\` ; $(LINK) $(libportaudio_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin portaudio` ;; \
	esac


