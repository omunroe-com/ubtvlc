
# Autogenerated by bootstrap - DO NOT EDIT - edit Modules.am instead

NULL =
libvlc_LIBRARIES =
noinst_LIBRARIES =
noinst_HEADERS =
EXTRA_DIST = Modules.am
BUILT_SOURCES =
SUBDIRS = cmml dmo ffmpeg ogt spudec
#DIST_SUBDIRS = $(SUBDIRS)
libvlcdir = $(libdir)/vlc/codec
include Modules.am

if BUILD_MOZILLA
if HAVE_WIN32
# There's no need for pic code on win32 so get rid of this to substantially
# reduce the compilation time.
pic = no
endif
else
pic = no
endif

clean-local:
	-rm -f *.a *.so *.dll *.sl *.dylib

all: all-modules
all-modules:
	@set fnord $$MAKEFLAGS; amf=$$2; targets=`\
	if test "$(plugin)" != "no"; then z=$$($(VLC_CONFIG) --target plugin); for mod in a52 cinepak dts flacdec lpcm araw vorbis tarkin theora tremor speex adpcm mpeg_audio libmpeg2 rawvideo quicktime subsdec faad dvbsub mash x264 toolame; do case "$$z" in */lib$${mod}_plugin*) echo lib$${mod}_plugin$(LIBEXT);; esac; done; fi; \
	if test "$(builtin)" != "no"; then z=$$($(VLC_CONFIG) --target builtin); for mod in a52 cinepak dts flacdec lpcm araw vorbis tarkin theora tremor speex adpcm mpeg_audio libmpeg2 rawvideo quicktime subsdec faad dvbsub mash x264 toolame; do case "$$z" in */lib$${mod}.a*) echo lib$${mod}.a;; esac; done; fi; \
	if test "$(pic)" != "no"; then z=$$($(VLC_CONFIG) --target builtin pic); for mod in a52 cinepak dts flacdec lpcm araw vorbis tarkin theora tremor speex adpcm mpeg_audio libmpeg2 rawvideo quicktime subsdec faad dvbsub mash x264 toolame; do case "$$z" in */lib$${mod}_pic.a*) echo lib$${mod}_pic.a;; esac; done; fi; \
	`; case "$$targets" in *lib*) $(MAKE) $(AM_MAKEFLAGS) $$targets || case "$$amf" in *=*) exit 1;; *k*) fail=yes;; *) exit 1;; esac; ;; esac; \
	test -z "$$fail"

# The a52 plugin

if UNTRUE
La52p = liba52_plugin.a
Da52p = liba52_plugin$(LIBEXT)
La52b = liba52.a
La52pic = liba52_pic.a
endif

liba52_plugin_a_SOURCES = $(SOURCES_a52)
liba52_plugin_a_CFLAGS = `$(VLC_CONFIG) --cflags plugin a52`
liba52_plugin_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags plugin a52`
liba52_plugin_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags plugin a52`

liba52_pic_a_SOURCES = $(SOURCES_a52)
liba52_pic_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin pic a52`
liba52_pic_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin pic a52`
liba52_pic_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin pic a52`

liba52_a_SOURCES = $(SOURCES_a52)
liba52_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin a52`
liba52_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin a52`
liba52_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin a52`

libvlc_LIBRARIES += $(La52b) $(La52pic)
liba52_DATA = $(Da52p)

liba52dir = $(libdir)/vlc/
noinst_LIBRARIES += $(La52p)
liba52_plugin$(LIBEXT): $(liba52_plugin_a_OBJECTS)
	@case `$(VLC_CONFIG) --linkage a52` in \
	  c++) echo $(CXXLINK) $(liba52_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin a52\` ; $(CXXLINK) $(liba52_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin a52` ;; \
	  objc) echo $(OBJCLINK) $(liba52_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin a52\` ; $(OBJCLINK) $(liba52_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin a52` ;; \
	  c|*) echo $(LINK) $(liba52_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin a52\` ; $(LINK) $(liba52_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin a52` ;; \
	esac


# The cinepak plugin

if UNTRUE
Lcinepakp = libcinepak_plugin.a
Dcinepakp = libcinepak_plugin$(LIBEXT)
Lcinepakb = libcinepak.a
Lcinepakpic = libcinepak_pic.a
endif

libcinepak_plugin_a_SOURCES = $(SOURCES_cinepak)
libcinepak_plugin_a_CFLAGS = `$(VLC_CONFIG) --cflags plugin cinepak`
libcinepak_plugin_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags plugin cinepak`
libcinepak_plugin_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags plugin cinepak`

libcinepak_pic_a_SOURCES = $(SOURCES_cinepak)
libcinepak_pic_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin pic cinepak`
libcinepak_pic_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin pic cinepak`
libcinepak_pic_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin pic cinepak`

libcinepak_a_SOURCES = $(SOURCES_cinepak)
libcinepak_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin cinepak`
libcinepak_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin cinepak`
libcinepak_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin cinepak`

libvlc_LIBRARIES += $(Lcinepakb) $(Lcinepakpic)
libcinepak_DATA = $(Dcinepakp)

libcinepakdir = $(libdir)/vlc/
noinst_LIBRARIES += $(Lcinepakp)
libcinepak_plugin$(LIBEXT): $(libcinepak_plugin_a_OBJECTS)
	@case `$(VLC_CONFIG) --linkage cinepak` in \
	  c++) echo $(CXXLINK) $(libcinepak_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin cinepak\` ; $(CXXLINK) $(libcinepak_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin cinepak` ;; \
	  objc) echo $(OBJCLINK) $(libcinepak_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin cinepak\` ; $(OBJCLINK) $(libcinepak_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin cinepak` ;; \
	  c|*) echo $(LINK) $(libcinepak_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin cinepak\` ; $(LINK) $(libcinepak_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin cinepak` ;; \
	esac


# The dts plugin

if UNTRUE
Ldtsp = libdts_plugin.a
Ddtsp = libdts_plugin$(LIBEXT)
Ldtsb = libdts.a
Ldtspic = libdts_pic.a
endif

libdts_plugin_a_SOURCES = $(SOURCES_dts)
libdts_plugin_a_CFLAGS = `$(VLC_CONFIG) --cflags plugin dts`
libdts_plugin_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags plugin dts`
libdts_plugin_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags plugin dts`

libdts_pic_a_SOURCES = $(SOURCES_dts)
libdts_pic_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin pic dts`
libdts_pic_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin pic dts`
libdts_pic_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin pic dts`

libdts_a_SOURCES = $(SOURCES_dts)
libdts_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin dts`
libdts_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin dts`
libdts_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin dts`

libvlc_LIBRARIES += $(Ldtsb) $(Ldtspic)
libdts_DATA = $(Ddtsp)

libdtsdir = $(libdir)/vlc/
noinst_LIBRARIES += $(Ldtsp)
libdts_plugin$(LIBEXT): $(libdts_plugin_a_OBJECTS)
	@case `$(VLC_CONFIG) --linkage dts` in \
	  c++) echo $(CXXLINK) $(libdts_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin dts\` ; $(CXXLINK) $(libdts_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin dts` ;; \
	  objc) echo $(OBJCLINK) $(libdts_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin dts\` ; $(OBJCLINK) $(libdts_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin dts` ;; \
	  c|*) echo $(LINK) $(libdts_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin dts\` ; $(LINK) $(libdts_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin dts` ;; \
	esac


# The flacdec plugin

if UNTRUE
Lflacdecp = libflacdec_plugin.a
Dflacdecp = libflacdec_plugin$(LIBEXT)
Lflacdecb = libflacdec.a
Lflacdecpic = libflacdec_pic.a
endif

libflacdec_plugin_a_SOURCES = $(SOURCES_flacdec)
libflacdec_plugin_a_CFLAGS = `$(VLC_CONFIG) --cflags plugin flacdec`
libflacdec_plugin_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags plugin flacdec`
libflacdec_plugin_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags plugin flacdec`

libflacdec_pic_a_SOURCES = $(SOURCES_flacdec)
libflacdec_pic_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin pic flacdec`
libflacdec_pic_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin pic flacdec`
libflacdec_pic_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin pic flacdec`

libflacdec_a_SOURCES = $(SOURCES_flacdec)
libflacdec_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin flacdec`
libflacdec_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin flacdec`
libflacdec_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin flacdec`

libvlc_LIBRARIES += $(Lflacdecb) $(Lflacdecpic)
libflacdec_DATA = $(Dflacdecp)

libflacdecdir = $(libdir)/vlc/
noinst_LIBRARIES += $(Lflacdecp)
libflacdec_plugin$(LIBEXT): $(libflacdec_plugin_a_OBJECTS)
	@case `$(VLC_CONFIG) --linkage flacdec` in \
	  c++) echo $(CXXLINK) $(libflacdec_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin flacdec\` ; $(CXXLINK) $(libflacdec_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin flacdec` ;; \
	  objc) echo $(OBJCLINK) $(libflacdec_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin flacdec\` ; $(OBJCLINK) $(libflacdec_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin flacdec` ;; \
	  c|*) echo $(LINK) $(libflacdec_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin flacdec\` ; $(LINK) $(libflacdec_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin flacdec` ;; \
	esac


# The lpcm plugin

if UNTRUE
Llpcmp = liblpcm_plugin.a
Dlpcmp = liblpcm_plugin$(LIBEXT)
Llpcmb = liblpcm.a
Llpcmpic = liblpcm_pic.a
endif

liblpcm_plugin_a_SOURCES = $(SOURCES_lpcm)
liblpcm_plugin_a_CFLAGS = `$(VLC_CONFIG) --cflags plugin lpcm`
liblpcm_plugin_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags plugin lpcm`
liblpcm_plugin_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags plugin lpcm`

liblpcm_pic_a_SOURCES = $(SOURCES_lpcm)
liblpcm_pic_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin pic lpcm`
liblpcm_pic_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin pic lpcm`
liblpcm_pic_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin pic lpcm`

liblpcm_a_SOURCES = $(SOURCES_lpcm)
liblpcm_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin lpcm`
liblpcm_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin lpcm`
liblpcm_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin lpcm`

libvlc_LIBRARIES += $(Llpcmb) $(Llpcmpic)
liblpcm_DATA = $(Dlpcmp)

liblpcmdir = $(libdir)/vlc/
noinst_LIBRARIES += $(Llpcmp)
liblpcm_plugin$(LIBEXT): $(liblpcm_plugin_a_OBJECTS)
	@case `$(VLC_CONFIG) --linkage lpcm` in \
	  c++) echo $(CXXLINK) $(liblpcm_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin lpcm\` ; $(CXXLINK) $(liblpcm_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin lpcm` ;; \
	  objc) echo $(OBJCLINK) $(liblpcm_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin lpcm\` ; $(OBJCLINK) $(liblpcm_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin lpcm` ;; \
	  c|*) echo $(LINK) $(liblpcm_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin lpcm\` ; $(LINK) $(liblpcm_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin lpcm` ;; \
	esac


# The araw plugin

if UNTRUE
Larawp = libaraw_plugin.a
Darawp = libaraw_plugin$(LIBEXT)
Larawb = libaraw.a
Larawpic = libaraw_pic.a
endif

libaraw_plugin_a_SOURCES = $(SOURCES_araw)
libaraw_plugin_a_CFLAGS = `$(VLC_CONFIG) --cflags plugin araw`
libaraw_plugin_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags plugin araw`
libaraw_plugin_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags plugin araw`

libaraw_pic_a_SOURCES = $(SOURCES_araw)
libaraw_pic_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin pic araw`
libaraw_pic_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin pic araw`
libaraw_pic_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin pic araw`

libaraw_a_SOURCES = $(SOURCES_araw)
libaraw_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin araw`
libaraw_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin araw`
libaraw_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin araw`

libvlc_LIBRARIES += $(Larawb) $(Larawpic)
libaraw_DATA = $(Darawp)

libarawdir = $(libdir)/vlc/
noinst_LIBRARIES += $(Larawp)
libaraw_plugin$(LIBEXT): $(libaraw_plugin_a_OBJECTS)
	@case `$(VLC_CONFIG) --linkage araw` in \
	  c++) echo $(CXXLINK) $(libaraw_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin araw\` ; $(CXXLINK) $(libaraw_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin araw` ;; \
	  objc) echo $(OBJCLINK) $(libaraw_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin araw\` ; $(OBJCLINK) $(libaraw_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin araw` ;; \
	  c|*) echo $(LINK) $(libaraw_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin araw\` ; $(LINK) $(libaraw_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin araw` ;; \
	esac


# The vorbis plugin

if UNTRUE
Lvorbisp = libvorbis_plugin.a
Dvorbisp = libvorbis_plugin$(LIBEXT)
Lvorbisb = libvorbis.a
Lvorbispic = libvorbis_pic.a
endif

libvorbis_plugin_a_SOURCES = $(SOURCES_vorbis)
libvorbis_plugin_a_CFLAGS = `$(VLC_CONFIG) --cflags plugin vorbis`
libvorbis_plugin_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags plugin vorbis`
libvorbis_plugin_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags plugin vorbis`

libvorbis_pic_a_SOURCES = $(SOURCES_vorbis)
libvorbis_pic_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin pic vorbis`
libvorbis_pic_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin pic vorbis`
libvorbis_pic_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin pic vorbis`

libvorbis_a_SOURCES = $(SOURCES_vorbis)
libvorbis_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin vorbis`
libvorbis_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin vorbis`
libvorbis_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin vorbis`

libvlc_LIBRARIES += $(Lvorbisb) $(Lvorbispic)
libvorbis_DATA = $(Dvorbisp)

libvorbisdir = $(libdir)/vlc/
noinst_LIBRARIES += $(Lvorbisp)
libvorbis_plugin$(LIBEXT): $(libvorbis_plugin_a_OBJECTS)
	@case `$(VLC_CONFIG) --linkage vorbis` in \
	  c++) echo $(CXXLINK) $(libvorbis_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin vorbis\` ; $(CXXLINK) $(libvorbis_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin vorbis` ;; \
	  objc) echo $(OBJCLINK) $(libvorbis_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin vorbis\` ; $(OBJCLINK) $(libvorbis_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin vorbis` ;; \
	  c|*) echo $(LINK) $(libvorbis_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin vorbis\` ; $(LINK) $(libvorbis_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin vorbis` ;; \
	esac


# The tarkin plugin

if UNTRUE
Ltarkinp = libtarkin_plugin.a
Dtarkinp = libtarkin_plugin$(LIBEXT)
Ltarkinb = libtarkin.a
Ltarkinpic = libtarkin_pic.a
endif

libtarkin_plugin_a_SOURCES = $(SOURCES_tarkin)
libtarkin_plugin_a_CFLAGS = `$(VLC_CONFIG) --cflags plugin tarkin`
libtarkin_plugin_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags plugin tarkin`
libtarkin_plugin_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags plugin tarkin`

libtarkin_pic_a_SOURCES = $(SOURCES_tarkin)
libtarkin_pic_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin pic tarkin`
libtarkin_pic_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin pic tarkin`
libtarkin_pic_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin pic tarkin`

libtarkin_a_SOURCES = $(SOURCES_tarkin)
libtarkin_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin tarkin`
libtarkin_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin tarkin`
libtarkin_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin tarkin`

libvlc_LIBRARIES += $(Ltarkinb) $(Ltarkinpic)
libtarkin_DATA = $(Dtarkinp)

libtarkindir = $(libdir)/vlc/
noinst_LIBRARIES += $(Ltarkinp)
libtarkin_plugin$(LIBEXT): $(libtarkin_plugin_a_OBJECTS)
	@case `$(VLC_CONFIG) --linkage tarkin` in \
	  c++) echo $(CXXLINK) $(libtarkin_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin tarkin\` ; $(CXXLINK) $(libtarkin_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin tarkin` ;; \
	  objc) echo $(OBJCLINK) $(libtarkin_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin tarkin\` ; $(OBJCLINK) $(libtarkin_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin tarkin` ;; \
	  c|*) echo $(LINK) $(libtarkin_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin tarkin\` ; $(LINK) $(libtarkin_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin tarkin` ;; \
	esac


# The theora plugin

if UNTRUE
Ltheorap = libtheora_plugin.a
Dtheorap = libtheora_plugin$(LIBEXT)
Ltheorab = libtheora.a
Ltheorapic = libtheora_pic.a
endif

libtheora_plugin_a_SOURCES = $(SOURCES_theora)
libtheora_plugin_a_CFLAGS = `$(VLC_CONFIG) --cflags plugin theora`
libtheora_plugin_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags plugin theora`
libtheora_plugin_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags plugin theora`

libtheora_pic_a_SOURCES = $(SOURCES_theora)
libtheora_pic_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin pic theora`
libtheora_pic_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin pic theora`
libtheora_pic_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin pic theora`

libtheora_a_SOURCES = $(SOURCES_theora)
libtheora_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin theora`
libtheora_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin theora`
libtheora_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin theora`

libvlc_LIBRARIES += $(Ltheorab) $(Ltheorapic)
libtheora_DATA = $(Dtheorap)

libtheoradir = $(libdir)/vlc/
noinst_LIBRARIES += $(Ltheorap)
libtheora_plugin$(LIBEXT): $(libtheora_plugin_a_OBJECTS)
	@case `$(VLC_CONFIG) --linkage theora` in \
	  c++) echo $(CXXLINK) $(libtheora_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin theora\` ; $(CXXLINK) $(libtheora_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin theora` ;; \
	  objc) echo $(OBJCLINK) $(libtheora_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin theora\` ; $(OBJCLINK) $(libtheora_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin theora` ;; \
	  c|*) echo $(LINK) $(libtheora_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin theora\` ; $(LINK) $(libtheora_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin theora` ;; \
	esac


# The tremor plugin

if UNTRUE
Ltremorp = libtremor_plugin.a
Dtremorp = libtremor_plugin$(LIBEXT)
Ltremorb = libtremor.a
Ltremorpic = libtremor_pic.a
endif

libtremor_plugin_a_SOURCES = $(SOURCES_tremor)
libtremor_plugin_a_CFLAGS = `$(VLC_CONFIG) --cflags plugin tremor`
libtremor_plugin_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags plugin tremor`
libtremor_plugin_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags plugin tremor`

libtremor_pic_a_SOURCES = $(SOURCES_tremor)
libtremor_pic_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin pic tremor`
libtremor_pic_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin pic tremor`
libtremor_pic_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin pic tremor`

libtremor_a_SOURCES = $(SOURCES_tremor)
libtremor_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin tremor`
libtremor_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin tremor`
libtremor_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin tremor`

libvlc_LIBRARIES += $(Ltremorb) $(Ltremorpic)
libtremor_DATA = $(Dtremorp)

libtremordir = $(libdir)/vlc/
noinst_LIBRARIES += $(Ltremorp)
libtremor_plugin$(LIBEXT): $(libtremor_plugin_a_OBJECTS)
	@case `$(VLC_CONFIG) --linkage tremor` in \
	  c++) echo $(CXXLINK) $(libtremor_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin tremor\` ; $(CXXLINK) $(libtremor_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin tremor` ;; \
	  objc) echo $(OBJCLINK) $(libtremor_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin tremor\` ; $(OBJCLINK) $(libtremor_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin tremor` ;; \
	  c|*) echo $(LINK) $(libtremor_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin tremor\` ; $(LINK) $(libtremor_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin tremor` ;; \
	esac


# The speex plugin

if UNTRUE
Lspeexp = libspeex_plugin.a
Dspeexp = libspeex_plugin$(LIBEXT)
Lspeexb = libspeex.a
Lspeexpic = libspeex_pic.a
endif

libspeex_plugin_a_SOURCES = $(SOURCES_speex)
libspeex_plugin_a_CFLAGS = `$(VLC_CONFIG) --cflags plugin speex`
libspeex_plugin_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags plugin speex`
libspeex_plugin_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags plugin speex`

libspeex_pic_a_SOURCES = $(SOURCES_speex)
libspeex_pic_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin pic speex`
libspeex_pic_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin pic speex`
libspeex_pic_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin pic speex`

libspeex_a_SOURCES = $(SOURCES_speex)
libspeex_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin speex`
libspeex_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin speex`
libspeex_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin speex`

libvlc_LIBRARIES += $(Lspeexb) $(Lspeexpic)
libspeex_DATA = $(Dspeexp)

libspeexdir = $(libdir)/vlc/
noinst_LIBRARIES += $(Lspeexp)
libspeex_plugin$(LIBEXT): $(libspeex_plugin_a_OBJECTS)
	@case `$(VLC_CONFIG) --linkage speex` in \
	  c++) echo $(CXXLINK) $(libspeex_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin speex\` ; $(CXXLINK) $(libspeex_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin speex` ;; \
	  objc) echo $(OBJCLINK) $(libspeex_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin speex\` ; $(OBJCLINK) $(libspeex_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin speex` ;; \
	  c|*) echo $(LINK) $(libspeex_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin speex\` ; $(LINK) $(libspeex_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin speex` ;; \
	esac


# The adpcm plugin

if UNTRUE
Ladpcmp = libadpcm_plugin.a
Dadpcmp = libadpcm_plugin$(LIBEXT)
Ladpcmb = libadpcm.a
Ladpcmpic = libadpcm_pic.a
endif

libadpcm_plugin_a_SOURCES = $(SOURCES_adpcm)
libadpcm_plugin_a_CFLAGS = `$(VLC_CONFIG) --cflags plugin adpcm`
libadpcm_plugin_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags plugin adpcm`
libadpcm_plugin_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags plugin adpcm`

libadpcm_pic_a_SOURCES = $(SOURCES_adpcm)
libadpcm_pic_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin pic adpcm`
libadpcm_pic_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin pic adpcm`
libadpcm_pic_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin pic adpcm`

libadpcm_a_SOURCES = $(SOURCES_adpcm)
libadpcm_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin adpcm`
libadpcm_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin adpcm`
libadpcm_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin adpcm`

libvlc_LIBRARIES += $(Ladpcmb) $(Ladpcmpic)
libadpcm_DATA = $(Dadpcmp)

libadpcmdir = $(libdir)/vlc/
noinst_LIBRARIES += $(Ladpcmp)
libadpcm_plugin$(LIBEXT): $(libadpcm_plugin_a_OBJECTS)
	@case `$(VLC_CONFIG) --linkage adpcm` in \
	  c++) echo $(CXXLINK) $(libadpcm_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin adpcm\` ; $(CXXLINK) $(libadpcm_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin adpcm` ;; \
	  objc) echo $(OBJCLINK) $(libadpcm_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin adpcm\` ; $(OBJCLINK) $(libadpcm_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin adpcm` ;; \
	  c|*) echo $(LINK) $(libadpcm_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin adpcm\` ; $(LINK) $(libadpcm_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin adpcm` ;; \
	esac


# The mpeg_audio plugin

if UNTRUE
Lmpeg_audiop = libmpeg_audio_plugin.a
Dmpeg_audiop = libmpeg_audio_plugin$(LIBEXT)
Lmpeg_audiob = libmpeg_audio.a
Lmpeg_audiopic = libmpeg_audio_pic.a
endif

libmpeg_audio_plugin_a_SOURCES = $(SOURCES_mpeg_audio)
libmpeg_audio_plugin_a_CFLAGS = `$(VLC_CONFIG) --cflags plugin mpeg_audio`
libmpeg_audio_plugin_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags plugin mpeg_audio`
libmpeg_audio_plugin_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags plugin mpeg_audio`

libmpeg_audio_pic_a_SOURCES = $(SOURCES_mpeg_audio)
libmpeg_audio_pic_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin pic mpeg_audio`
libmpeg_audio_pic_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin pic mpeg_audio`
libmpeg_audio_pic_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin pic mpeg_audio`

libmpeg_audio_a_SOURCES = $(SOURCES_mpeg_audio)
libmpeg_audio_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin mpeg_audio`
libmpeg_audio_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin mpeg_audio`
libmpeg_audio_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin mpeg_audio`

libvlc_LIBRARIES += $(Lmpeg_audiob) $(Lmpeg_audiopic)
libmpeg_audio_DATA = $(Dmpeg_audiop)

libmpeg_audiodir = $(libdir)/vlc/
noinst_LIBRARIES += $(Lmpeg_audiop)
libmpeg_audio_plugin$(LIBEXT): $(libmpeg_audio_plugin_a_OBJECTS)
	@case `$(VLC_CONFIG) --linkage mpeg_audio` in \
	  c++) echo $(CXXLINK) $(libmpeg_audio_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin mpeg_audio\` ; $(CXXLINK) $(libmpeg_audio_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin mpeg_audio` ;; \
	  objc) echo $(OBJCLINK) $(libmpeg_audio_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin mpeg_audio\` ; $(OBJCLINK) $(libmpeg_audio_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin mpeg_audio` ;; \
	  c|*) echo $(LINK) $(libmpeg_audio_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin mpeg_audio\` ; $(LINK) $(libmpeg_audio_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin mpeg_audio` ;; \
	esac


# The libmpeg2 plugin

if UNTRUE
Llibmpeg2p = liblibmpeg2_plugin.a
Dlibmpeg2p = liblibmpeg2_plugin$(LIBEXT)
Llibmpeg2b = liblibmpeg2.a
Llibmpeg2pic = liblibmpeg2_pic.a
endif

liblibmpeg2_plugin_a_SOURCES = $(SOURCES_libmpeg2)
liblibmpeg2_plugin_a_CFLAGS = `$(VLC_CONFIG) --cflags plugin libmpeg2`
liblibmpeg2_plugin_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags plugin libmpeg2`
liblibmpeg2_plugin_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags plugin libmpeg2`

liblibmpeg2_pic_a_SOURCES = $(SOURCES_libmpeg2)
liblibmpeg2_pic_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin pic libmpeg2`
liblibmpeg2_pic_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin pic libmpeg2`
liblibmpeg2_pic_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin pic libmpeg2`

liblibmpeg2_a_SOURCES = $(SOURCES_libmpeg2)
liblibmpeg2_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin libmpeg2`
liblibmpeg2_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin libmpeg2`
liblibmpeg2_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin libmpeg2`

libvlc_LIBRARIES += $(Llibmpeg2b) $(Llibmpeg2pic)
liblibmpeg2_DATA = $(Dlibmpeg2p)

liblibmpeg2dir = $(libdir)/vlc/
noinst_LIBRARIES += $(Llibmpeg2p)
liblibmpeg2_plugin$(LIBEXT): $(liblibmpeg2_plugin_a_OBJECTS)
	@case `$(VLC_CONFIG) --linkage libmpeg2` in \
	  c++) echo $(CXXLINK) $(liblibmpeg2_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin libmpeg2\` ; $(CXXLINK) $(liblibmpeg2_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin libmpeg2` ;; \
	  objc) echo $(OBJCLINK) $(liblibmpeg2_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin libmpeg2\` ; $(OBJCLINK) $(liblibmpeg2_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin libmpeg2` ;; \
	  c|*) echo $(LINK) $(liblibmpeg2_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin libmpeg2\` ; $(LINK) $(liblibmpeg2_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin libmpeg2` ;; \
	esac


# The rawvideo plugin

if UNTRUE
Lrawvideop = librawvideo_plugin.a
Drawvideop = librawvideo_plugin$(LIBEXT)
Lrawvideob = librawvideo.a
Lrawvideopic = librawvideo_pic.a
endif

librawvideo_plugin_a_SOURCES = $(SOURCES_rawvideo)
librawvideo_plugin_a_CFLAGS = `$(VLC_CONFIG) --cflags plugin rawvideo`
librawvideo_plugin_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags plugin rawvideo`
librawvideo_plugin_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags plugin rawvideo`

librawvideo_pic_a_SOURCES = $(SOURCES_rawvideo)
librawvideo_pic_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin pic rawvideo`
librawvideo_pic_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin pic rawvideo`
librawvideo_pic_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin pic rawvideo`

librawvideo_a_SOURCES = $(SOURCES_rawvideo)
librawvideo_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin rawvideo`
librawvideo_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin rawvideo`
librawvideo_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin rawvideo`

libvlc_LIBRARIES += $(Lrawvideob) $(Lrawvideopic)
librawvideo_DATA = $(Drawvideop)

librawvideodir = $(libdir)/vlc/
noinst_LIBRARIES += $(Lrawvideop)
librawvideo_plugin$(LIBEXT): $(librawvideo_plugin_a_OBJECTS)
	@case `$(VLC_CONFIG) --linkage rawvideo` in \
	  c++) echo $(CXXLINK) $(librawvideo_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin rawvideo\` ; $(CXXLINK) $(librawvideo_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin rawvideo` ;; \
	  objc) echo $(OBJCLINK) $(librawvideo_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin rawvideo\` ; $(OBJCLINK) $(librawvideo_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin rawvideo` ;; \
	  c|*) echo $(LINK) $(librawvideo_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin rawvideo\` ; $(LINK) $(librawvideo_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin rawvideo` ;; \
	esac


# The quicktime plugin

if UNTRUE
Lquicktimep = libquicktime_plugin.a
Dquicktimep = libquicktime_plugin$(LIBEXT)
Lquicktimeb = libquicktime.a
Lquicktimepic = libquicktime_pic.a
endif

libquicktime_plugin_a_SOURCES = $(SOURCES_quicktime)
libquicktime_plugin_a_CFLAGS = `$(VLC_CONFIG) --cflags plugin quicktime`
libquicktime_plugin_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags plugin quicktime`
libquicktime_plugin_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags plugin quicktime`

libquicktime_pic_a_SOURCES = $(SOURCES_quicktime)
libquicktime_pic_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin pic quicktime`
libquicktime_pic_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin pic quicktime`
libquicktime_pic_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin pic quicktime`

libquicktime_a_SOURCES = $(SOURCES_quicktime)
libquicktime_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin quicktime`
libquicktime_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin quicktime`
libquicktime_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin quicktime`

libvlc_LIBRARIES += $(Lquicktimeb) $(Lquicktimepic)
libquicktime_DATA = $(Dquicktimep)

libquicktimedir = $(libdir)/vlc/
noinst_LIBRARIES += $(Lquicktimep)
libquicktime_plugin$(LIBEXT): $(libquicktime_plugin_a_OBJECTS)
	@case `$(VLC_CONFIG) --linkage quicktime` in \
	  c++) echo $(CXXLINK) $(libquicktime_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin quicktime\` ; $(CXXLINK) $(libquicktime_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin quicktime` ;; \
	  objc) echo $(OBJCLINK) $(libquicktime_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin quicktime\` ; $(OBJCLINK) $(libquicktime_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin quicktime` ;; \
	  c|*) echo $(LINK) $(libquicktime_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin quicktime\` ; $(LINK) $(libquicktime_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin quicktime` ;; \
	esac


# The subsdec plugin

if UNTRUE
Lsubsdecp = libsubsdec_plugin.a
Dsubsdecp = libsubsdec_plugin$(LIBEXT)
Lsubsdecb = libsubsdec.a
Lsubsdecpic = libsubsdec_pic.a
endif

libsubsdec_plugin_a_SOURCES = $(SOURCES_subsdec)
libsubsdec_plugin_a_CFLAGS = `$(VLC_CONFIG) --cflags plugin subsdec`
libsubsdec_plugin_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags plugin subsdec`
libsubsdec_plugin_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags plugin subsdec`

libsubsdec_pic_a_SOURCES = $(SOURCES_subsdec)
libsubsdec_pic_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin pic subsdec`
libsubsdec_pic_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin pic subsdec`
libsubsdec_pic_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin pic subsdec`

libsubsdec_a_SOURCES = $(SOURCES_subsdec)
libsubsdec_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin subsdec`
libsubsdec_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin subsdec`
libsubsdec_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin subsdec`

libvlc_LIBRARIES += $(Lsubsdecb) $(Lsubsdecpic)
libsubsdec_DATA = $(Dsubsdecp)

libsubsdecdir = $(libdir)/vlc/
noinst_LIBRARIES += $(Lsubsdecp)
libsubsdec_plugin$(LIBEXT): $(libsubsdec_plugin_a_OBJECTS)
	@case `$(VLC_CONFIG) --linkage subsdec` in \
	  c++) echo $(CXXLINK) $(libsubsdec_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin subsdec\` ; $(CXXLINK) $(libsubsdec_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin subsdec` ;; \
	  objc) echo $(OBJCLINK) $(libsubsdec_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin subsdec\` ; $(OBJCLINK) $(libsubsdec_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin subsdec` ;; \
	  c|*) echo $(LINK) $(libsubsdec_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin subsdec\` ; $(LINK) $(libsubsdec_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin subsdec` ;; \
	esac


# The faad plugin

if UNTRUE
Lfaadp = libfaad_plugin.a
Dfaadp = libfaad_plugin$(LIBEXT)
Lfaadb = libfaad.a
Lfaadpic = libfaad_pic.a
endif

libfaad_plugin_a_SOURCES = $(SOURCES_faad)
libfaad_plugin_a_CFLAGS = `$(VLC_CONFIG) --cflags plugin faad`
libfaad_plugin_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags plugin faad`
libfaad_plugin_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags plugin faad`

libfaad_pic_a_SOURCES = $(SOURCES_faad)
libfaad_pic_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin pic faad`
libfaad_pic_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin pic faad`
libfaad_pic_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin pic faad`

libfaad_a_SOURCES = $(SOURCES_faad)
libfaad_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin faad`
libfaad_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin faad`
libfaad_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin faad`

libvlc_LIBRARIES += $(Lfaadb) $(Lfaadpic)
libfaad_DATA = $(Dfaadp)

libfaaddir = $(libdir)/vlc/
noinst_LIBRARIES += $(Lfaadp)
libfaad_plugin$(LIBEXT): $(libfaad_plugin_a_OBJECTS)
	@case `$(VLC_CONFIG) --linkage faad` in \
	  c++) echo $(CXXLINK) $(libfaad_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin faad\` ; $(CXXLINK) $(libfaad_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin faad` ;; \
	  objc) echo $(OBJCLINK) $(libfaad_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin faad\` ; $(OBJCLINK) $(libfaad_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin faad` ;; \
	  c|*) echo $(LINK) $(libfaad_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin faad\` ; $(LINK) $(libfaad_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin faad` ;; \
	esac


# The dvbsub plugin

if UNTRUE
Ldvbsubp = libdvbsub_plugin.a
Ddvbsubp = libdvbsub_plugin$(LIBEXT)
Ldvbsubb = libdvbsub.a
Ldvbsubpic = libdvbsub_pic.a
endif

libdvbsub_plugin_a_SOURCES = $(SOURCES_dvbsub)
libdvbsub_plugin_a_CFLAGS = `$(VLC_CONFIG) --cflags plugin dvbsub`
libdvbsub_plugin_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags plugin dvbsub`
libdvbsub_plugin_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags plugin dvbsub`

libdvbsub_pic_a_SOURCES = $(SOURCES_dvbsub)
libdvbsub_pic_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin pic dvbsub`
libdvbsub_pic_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin pic dvbsub`
libdvbsub_pic_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin pic dvbsub`

libdvbsub_a_SOURCES = $(SOURCES_dvbsub)
libdvbsub_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin dvbsub`
libdvbsub_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin dvbsub`
libdvbsub_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin dvbsub`

libvlc_LIBRARIES += $(Ldvbsubb) $(Ldvbsubpic)
libdvbsub_DATA = $(Ddvbsubp)

libdvbsubdir = $(libdir)/vlc/
noinst_LIBRARIES += $(Ldvbsubp)
libdvbsub_plugin$(LIBEXT): $(libdvbsub_plugin_a_OBJECTS)
	@case `$(VLC_CONFIG) --linkage dvbsub` in \
	  c++) echo $(CXXLINK) $(libdvbsub_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin dvbsub\` ; $(CXXLINK) $(libdvbsub_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin dvbsub` ;; \
	  objc) echo $(OBJCLINK) $(libdvbsub_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin dvbsub\` ; $(OBJCLINK) $(libdvbsub_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin dvbsub` ;; \
	  c|*) echo $(LINK) $(libdvbsub_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin dvbsub\` ; $(LINK) $(libdvbsub_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin dvbsub` ;; \
	esac


# The mash plugin

if UNTRUE
Lmashp = libmash_plugin.a
Dmashp = libmash_plugin$(LIBEXT)
Lmashb = libmash.a
Lmashpic = libmash_pic.a
endif

libmash_plugin_a_SOURCES = $(SOURCES_mash)
libmash_plugin_a_CFLAGS = `$(VLC_CONFIG) --cflags plugin mash`
libmash_plugin_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags plugin mash`
libmash_plugin_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags plugin mash`

libmash_pic_a_SOURCES = $(SOURCES_mash)
libmash_pic_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin pic mash`
libmash_pic_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin pic mash`
libmash_pic_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin pic mash`

libmash_a_SOURCES = $(SOURCES_mash)
libmash_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin mash`
libmash_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin mash`
libmash_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin mash`

libvlc_LIBRARIES += $(Lmashb) $(Lmashpic)
libmash_DATA = $(Dmashp)

libmashdir = $(libdir)/vlc/
noinst_LIBRARIES += $(Lmashp)
libmash_plugin$(LIBEXT): $(libmash_plugin_a_OBJECTS)
	@case `$(VLC_CONFIG) --linkage mash` in \
	  c++) echo $(CXXLINK) $(libmash_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin mash\` ; $(CXXLINK) $(libmash_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin mash` ;; \
	  objc) echo $(OBJCLINK) $(libmash_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin mash\` ; $(OBJCLINK) $(libmash_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin mash` ;; \
	  c|*) echo $(LINK) $(libmash_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin mash\` ; $(LINK) $(libmash_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin mash` ;; \
	esac


# The x264 plugin

if UNTRUE
Lx264p = libx264_plugin.a
Dx264p = libx264_plugin$(LIBEXT)
Lx264b = libx264.a
Lx264pic = libx264_pic.a
endif

libx264_plugin_a_SOURCES = $(SOURCES_x264)
libx264_plugin_a_CFLAGS = `$(VLC_CONFIG) --cflags plugin x264`
libx264_plugin_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags plugin x264`
libx264_plugin_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags plugin x264`

libx264_pic_a_SOURCES = $(SOURCES_x264)
libx264_pic_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin pic x264`
libx264_pic_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin pic x264`
libx264_pic_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin pic x264`

libx264_a_SOURCES = $(SOURCES_x264)
libx264_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin x264`
libx264_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin x264`
libx264_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin x264`

libvlc_LIBRARIES += $(Lx264b) $(Lx264pic)
libx264_DATA = $(Dx264p)

libx264dir = $(libdir)/vlc/
noinst_LIBRARIES += $(Lx264p)
libx264_plugin$(LIBEXT): $(libx264_plugin_a_OBJECTS)
	@case `$(VLC_CONFIG) --linkage x264` in \
	  c++) echo $(CXXLINK) $(libx264_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin x264\` ; $(CXXLINK) $(libx264_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin x264` ;; \
	  objc) echo $(OBJCLINK) $(libx264_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin x264\` ; $(OBJCLINK) $(libx264_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin x264` ;; \
	  c|*) echo $(LINK) $(libx264_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin x264\` ; $(LINK) $(libx264_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin x264` ;; \
	esac


# The toolame plugin

if UNTRUE
Ltoolamep = libtoolame_plugin.a
Dtoolamep = libtoolame_plugin$(LIBEXT)
Ltoolameb = libtoolame.a
Ltoolamepic = libtoolame_pic.a
endif

libtoolame_plugin_a_SOURCES = $(SOURCES_toolame)
libtoolame_plugin_a_CFLAGS = `$(VLC_CONFIG) --cflags plugin toolame`
libtoolame_plugin_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags plugin toolame`
libtoolame_plugin_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags plugin toolame`

libtoolame_pic_a_SOURCES = $(SOURCES_toolame)
libtoolame_pic_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin pic toolame`
libtoolame_pic_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin pic toolame`
libtoolame_pic_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin pic toolame`

libtoolame_a_SOURCES = $(SOURCES_toolame)
libtoolame_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin toolame`
libtoolame_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin toolame`
libtoolame_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin toolame`

libvlc_LIBRARIES += $(Ltoolameb) $(Ltoolamepic)
libtoolame_DATA = $(Dtoolamep)

libtoolamedir = $(libdir)/vlc/
noinst_LIBRARIES += $(Ltoolamep)
libtoolame_plugin$(LIBEXT): $(libtoolame_plugin_a_OBJECTS)
	@case `$(VLC_CONFIG) --linkage toolame` in \
	  c++) echo $(CXXLINK) $(libtoolame_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin toolame\` ; $(CXXLINK) $(libtoolame_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin toolame` ;; \
	  objc) echo $(OBJCLINK) $(libtoolame_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin toolame\` ; $(OBJCLINK) $(libtoolame_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin toolame` ;; \
	  c|*) echo $(LINK) $(libtoolame_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin toolame\` ; $(LINK) $(libtoolame_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin toolame` ;; \
	esac


