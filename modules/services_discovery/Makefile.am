
# Autogenerated by bootstrap - DO NOT EDIT - edit Modules.am instead

NULL =
libvlc_LIBRARIES =
noinst_LIBRARIES =
noinst_HEADERS =
EXTRA_DIST = Modules.am
BUILT_SOURCES =
SUBDIRS = 
#DIST_SUBDIRS = $(SUBDIRS)
libvlcdir = $(libdir)/vlc/services_discovery
include Modules.am

if BUILD_MOZILLA
if HAVE_WIN32
# There's no need for pic code on win32 so get rid of this to substantially
# reduce the compilation time.
pic = no
endif
else
pic = no
endif

clean-local:
	-rm -f *.a *.so *.dll *.sl *.dylib

all: all-modules
all-modules:
	@set fnord $$MAKEFLAGS; amf=$$2; targets=`\
	if test "$(plugin)" != "no"; then z=$$($(VLC_CONFIG) --target plugin); for mod in sap hal daap shout; do case "$$z" in */lib$${mod}_plugin*) echo lib$${mod}_plugin$(LIBEXT);; esac; done; fi; \
	if test "$(builtin)" != "no"; then z=$$($(VLC_CONFIG) --target builtin); for mod in sap hal daap shout; do case "$$z" in */lib$${mod}.a*) echo lib$${mod}.a;; esac; done; fi; \
	if test "$(pic)" != "no"; then z=$$($(VLC_CONFIG) --target builtin pic); for mod in sap hal daap shout; do case "$$z" in */lib$${mod}_pic.a*) echo lib$${mod}_pic.a;; esac; done; fi; \
	`; case "$$targets" in *lib*) $(MAKE) $(AM_MAKEFLAGS) $$targets || case "$$amf" in *=*) exit 1;; *k*) fail=yes;; *) exit 1;; esac; ;; esac; \
	test -z "$$fail"

# The sap plugin

if UNTRUE
Lsapp = libsap_plugin.a
Dsapp = libsap_plugin$(LIBEXT)
Lsapb = libsap.a
Lsappic = libsap_pic.a
endif

libsap_plugin_a_SOURCES = $(SOURCES_sap)
libsap_plugin_a_CFLAGS = `$(VLC_CONFIG) --cflags plugin sap`
libsap_plugin_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags plugin sap`
libsap_plugin_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags plugin sap`

libsap_pic_a_SOURCES = $(SOURCES_sap)
libsap_pic_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin pic sap`
libsap_pic_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin pic sap`
libsap_pic_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin pic sap`

libsap_a_SOURCES = $(SOURCES_sap)
libsap_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin sap`
libsap_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin sap`
libsap_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin sap`

libvlc_LIBRARIES += $(Lsapb) $(Lsappic)
libsap_DATA = $(Dsapp)

libsapdir = $(libdir)/vlc/
noinst_LIBRARIES += $(Lsapp)
libsap_plugin$(LIBEXT): $(libsap_plugin_a_OBJECTS)
	@case `$(VLC_CONFIG) --linkage sap` in \
	  c++) echo $(CXXLINK) $(libsap_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin sap\` ; $(CXXLINK) $(libsap_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin sap` ;; \
	  objc) echo $(OBJCLINK) $(libsap_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin sap\` ; $(OBJCLINK) $(libsap_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin sap` ;; \
	  c|*) echo $(LINK) $(libsap_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin sap\` ; $(LINK) $(libsap_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin sap` ;; \
	esac


# The hal plugin

if UNTRUE
Lhalp = libhal_plugin.a
Dhalp = libhal_plugin$(LIBEXT)
Lhalb = libhal.a
Lhalpic = libhal_pic.a
endif

libhal_plugin_a_SOURCES = $(SOURCES_hal)
libhal_plugin_a_CFLAGS = `$(VLC_CONFIG) --cflags plugin hal`
libhal_plugin_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags plugin hal`
libhal_plugin_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags plugin hal`

libhal_pic_a_SOURCES = $(SOURCES_hal)
libhal_pic_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin pic hal`
libhal_pic_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin pic hal`
libhal_pic_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin pic hal`

libhal_a_SOURCES = $(SOURCES_hal)
libhal_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin hal`
libhal_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin hal`
libhal_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin hal`

libvlc_LIBRARIES += $(Lhalb) $(Lhalpic)
libhal_DATA = $(Dhalp)

libhaldir = $(libdir)/vlc/
noinst_LIBRARIES += $(Lhalp)
libhal_plugin$(LIBEXT): $(libhal_plugin_a_OBJECTS)
	@case `$(VLC_CONFIG) --linkage hal` in \
	  c++) echo $(CXXLINK) $(libhal_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin hal\` ; $(CXXLINK) $(libhal_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin hal` ;; \
	  objc) echo $(OBJCLINK) $(libhal_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin hal\` ; $(OBJCLINK) $(libhal_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin hal` ;; \
	  c|*) echo $(LINK) $(libhal_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin hal\` ; $(LINK) $(libhal_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin hal` ;; \
	esac


# The daap plugin

if UNTRUE
Ldaapp = libdaap_plugin.a
Ddaapp = libdaap_plugin$(LIBEXT)
Ldaapb = libdaap.a
Ldaappic = libdaap_pic.a
endif

libdaap_plugin_a_SOURCES = $(SOURCES_daap)
libdaap_plugin_a_CFLAGS = `$(VLC_CONFIG) --cflags plugin daap`
libdaap_plugin_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags plugin daap`
libdaap_plugin_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags plugin daap`

libdaap_pic_a_SOURCES = $(SOURCES_daap)
libdaap_pic_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin pic daap`
libdaap_pic_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin pic daap`
libdaap_pic_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin pic daap`

libdaap_a_SOURCES = $(SOURCES_daap)
libdaap_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin daap`
libdaap_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin daap`
libdaap_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin daap`

libvlc_LIBRARIES += $(Ldaapb) $(Ldaappic)
libdaap_DATA = $(Ddaapp)

libdaapdir = $(libdir)/vlc/
noinst_LIBRARIES += $(Ldaapp)
libdaap_plugin$(LIBEXT): $(libdaap_plugin_a_OBJECTS)
	@case `$(VLC_CONFIG) --linkage daap` in \
	  c++) echo $(CXXLINK) $(libdaap_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin daap\` ; $(CXXLINK) $(libdaap_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin daap` ;; \
	  objc) echo $(OBJCLINK) $(libdaap_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin daap\` ; $(OBJCLINK) $(libdaap_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin daap` ;; \
	  c|*) echo $(LINK) $(libdaap_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin daap\` ; $(LINK) $(libdaap_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin daap` ;; \
	esac


# The shout plugin

if UNTRUE
Lshoutp = libshout_plugin.a
Dshoutp = libshout_plugin$(LIBEXT)
Lshoutb = libshout.a
Lshoutpic = libshout_pic.a
endif

libshout_plugin_a_SOURCES = $(SOURCES_shout)
libshout_plugin_a_CFLAGS = `$(VLC_CONFIG) --cflags plugin shout`
libshout_plugin_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags plugin shout`
libshout_plugin_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags plugin shout`

libshout_pic_a_SOURCES = $(SOURCES_shout)
libshout_pic_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin pic shout`
libshout_pic_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin pic shout`
libshout_pic_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin pic shout`

libshout_a_SOURCES = $(SOURCES_shout)
libshout_a_CFLAGS = `$(VLC_CONFIG) --cflags builtin shout`
libshout_a_CXXFLAGS = `$(VLC_CONFIG) --cxxflags builtin shout`
libshout_a_OBJCFLAGS = `$(VLC_CONFIG) --objcflags builtin shout`

libvlc_LIBRARIES += $(Lshoutb) $(Lshoutpic)
libshout_DATA = $(Dshoutp)

libshoutdir = $(libdir)/vlc/
noinst_LIBRARIES += $(Lshoutp)
libshout_plugin$(LIBEXT): $(libshout_plugin_a_OBJECTS)
	@case `$(VLC_CONFIG) --linkage shout` in \
	  c++) echo $(CXXLINK) $(libshout_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin shout\` ; $(CXXLINK) $(libshout_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin shout` ;; \
	  objc) echo $(OBJCLINK) $(libshout_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin shout\` ; $(OBJCLINK) $(libshout_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin shout` ;; \
	  c|*) echo $(LINK) $(libshout_plugin_a_OBJECTS) \`$(VLC_CONFIG) --libs plugin shout\` ; $(LINK) $(libshout_plugin_a_OBJECTS) `$(VLC_CONFIG) --libs plugin shout` ;; \
	esac


